<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue.js设计与实现</title>
      <link href="/2023/06/11/Vue.js%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/06/11/Vue.js%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h2 id="第一章-权衡艺术"><a href="#第一章-权衡艺术" class="headerlink" title="第一章 权衡艺术"></a>第一章 权衡艺术</h2><h3 id="1-1-命令式和声明式"><a href="#1-1-命令式和声明式" class="headerlink" title="1.1 命令式和声明式"></a>1.1 命令式和声明式</h3><h4 id="从范式上看，视图层框架分为命令式和声明式。"><a href="#从范式上看，视图层框架分为命令式和声明式。" class="headerlink" title="从范式上看，视图层框架分为命令式和声明式。"></a>从范式上看，视图层框架分为命令式和声明式。</h4><h5 id="命令式："><a href="#命令式：" class="headerlink" title="命令式："></a>命令式：</h5><p>一大特点是：<strong>关注过程</strong></p><h5 id="声明式："><a href="#声明式：" class="headerlink" title="声明式："></a>声明式：</h5><p>一大特点是：<strong>关注结果</strong></p><h3 id="1-2-性能与可维护性"><a href="#1-2-性能与可维护性" class="headerlink" title="1.2 性能与可维护性"></a>1.2 性能与可维护性</h3><p><strong>声明式代码的性能不优于命令式代码的性能</strong></p><p>框架本身就是封装了命令式代码才实现了面向用户的声明式</p><p><strong>声明式</strong>代码的<strong>可维护性强</strong></p><h3 id="1-3-虚拟DOM的性能"><a href="#1-3-虚拟DOM的性能" class="headerlink" title="1.3 虚拟DOM的性能"></a>1.3 虚拟DOM的性能</h3><p>为了使声明式的性能更接近命令式的性能，这就是虚拟DOM的作用</p><p>通过innerHTML创建页面的性能：<strong>HTML字符串拼接的计算量+innerHTML的DOM计算量</strong></p><p>虚拟DOM创建页面的性能：<strong>创建JavaScript对象的计算量+创建真实DOM的计算量</strong></p><p>innerHTML更新页面的时候：要重新构建HTML字符串，再重新设置DOM元素的innerHTML属性。其实就是要<strong>销毁所有旧的DOM元素，再全量的创建新的DOM元素。</strong></p><p>虚拟DOM更新页面的时候：比较<strong>新旧虚拟DOM，找到变化的元素更新它</strong></p><p>性能：原生JavaScript &gt; 虚拟DOM &gt; innerHTML(模板)</p><h3 id="1-4-运行时和编译时"><a href="#1-4-运行时和编译时" class="headerlink" title="1.4 运行时和编译时"></a>1.4 运行时和编译时</h3><h4 id="纯运行时："><a href="#纯运行时：" class="headerlink" title="纯运行时："></a>纯运行时：</h4><p>编写一个Render函数</p><p>提供一个树型结构的数据对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="number">02</span>   <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"><span class="number">03</span>   <span class="attr">children</span>: [</span><br><span class="line"><span class="number">04</span>     &#123; <span class="attr">tag</span>: <span class="string">&#x27;span&#x27;</span>, <span class="attr">children</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;</span><br><span class="line"><span class="number">05</span>   ]</span><br><span class="line"><span class="number">06</span> &#125;</span><br></pre></td></tr></table></figure><p>Render函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="keyword">function</span> <span class="title function_">Render</span>(<span class="params">obj, root</span>) &#123;</span><br><span class="line"><span class="number">02</span>   <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(obj.<span class="property">tag</span>)</span><br><span class="line"><span class="number">03</span>   <span class="keyword">if</span> (<span class="keyword">typeof</span> obj.<span class="property">children</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line"><span class="number">04</span>     <span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(obj.<span class="property">children</span>)</span><br><span class="line"><span class="number">05</span>     el.<span class="title function_">appendChild</span>(text)</span><br><span class="line"><span class="number">06</span>   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj.<span class="property">children</span>) &#123;</span><br><span class="line"><span class="number">07</span>     <span class="comment">// 数组，递归调用 Render，使用 el 作为 root 参数</span></span><br><span class="line"><span class="number">08</span>     obj.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> <span class="title class_">Render</span>(child, el))</span><br><span class="line"><span class="number">09</span>   &#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span>   <span class="comment">// 将元素添加到 root</span></span><br><span class="line"><span class="number">12</span>   root.<span class="title function_">appendChild</span>(el)</span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="number">02</span>   <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"><span class="number">03</span>   <span class="attr">children</span>: [</span><br><span class="line"><span class="number">04</span>     &#123; <span class="attr">tag</span>: <span class="string">&#x27;span&#x27;</span>, <span class="attr">children</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;</span><br><span class="line"><span class="number">05</span>   ]</span><br><span class="line"><span class="number">06</span> &#125;</span><br><span class="line"><span class="number">07</span> <span class="comment">// 渲染到 body 下</span></span><br><span class="line"><span class="number">08</span> <span class="title class_">Render</span>(obj, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br></pre></td></tr></table></figure><h4 id="运行时-编译时"><a href="#运行时-编译时" class="headerlink" title="运行时+编译时"></a>运行时+编译时</h4><p>编写Compiler的程序，作用是把HTML字符串编译成树型结构的数据对象</p><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">02 &lt;div&gt;</span></span><br><span class="line"><span class="string">03   &lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">04 &lt;/div&gt;</span></span><br><span class="line"><span class="string">05 `</span></span><br><span class="line"><span class="number">06</span> <span class="comment">// 调用 Compiler 编译得到树型结构的数据对象</span></span><br><span class="line"><span class="number">07</span> <span class="keyword">const</span> obj = <span class="title class_">Compiler</span>(html)</span><br><span class="line"><span class="number">08</span> <span class="comment">// 再调用 Render 进行渲染</span></span><br><span class="line"><span class="number">09</span> <span class="title class_">Render</span>(obj, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br></pre></td></tr></table></figure><h4 id="纯编译时："><a href="#纯编译时：" class="headerlink" title="纯编译时："></a>纯编译时：</h4><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wBZ0pbQQ-1686448242740)(C:\Users\virtue\AppData\Roaming\Typora\typora-user-images\image-20230213173530302.png)]</p><p>这个时候只需要Compiler函数就可以了，只通过编译器编译就可以了。</p><h2 id="第二章-框架设计的核心要素"><a href="#第二章-框架设计的核心要素" class="headerlink" title="第二章 框架设计的核心要素"></a>第二章 框架设计的核心要素</h2><h4 id="一-提升用户的开发体验"><a href="#一-提升用户的开发体验" class="headerlink" title="一. 提升用户的开发体验"></a>一. 提升用户的开发体验</h4><h4 id="二-控制框架代码的体积"><a href="#二-控制框架代码的体积" class="headerlink" title="二. 控制框架代码的体积"></a>二. 控制框架代码的体积</h4><h4 id="三-框架要做到良好的Tree-Shaking"><a href="#三-框架要做到良好的Tree-Shaking" class="headerlink" title="三. 框架要做到良好的Tree-Shaking"></a>三. 框架要做到良好的Tree-Shaking</h4><p>Tree-Shaking 指的是消除哪些永远不会被执行的代码，排除dead code</p><p>实现Tree-Shaking必须满足模板是ESM（ES Module）依赖ESM的静态结构</p><h4 id="Tree-Shaking工作原理："><a href="#Tree-Shaking工作原理：" class="headerlink" title="Tree-Shaking工作原理："></a>Tree-Shaking工作原理：</h4><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01 ├── demo</span><br><span class="line">02 │   └── package.json</span><br><span class="line">03 │   └── input.js</span><br><span class="line">04 │   └── utils.js</span><br></pre></td></tr></table></figure><p><strong>首先安装rollup.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> yarn add rollup -D</span><br><span class="line"><span class="number">02</span> # 或者 npm install rollup -D</span><br></pre></td></tr></table></figure><p><strong>input.js</strong>和<strong>util.js</strong>文件的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="comment">// input.js</span></span><br><span class="line"><span class="number">02</span> <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils.js&#x27;</span></span><br><span class="line"><span class="number">03</span> <span class="title function_">foo</span>()</span><br><span class="line"><span class="number">04</span> <span class="comment">// utils.js</span></span><br><span class="line"><span class="number">05</span> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="number">06</span>   obj &amp;&amp; obj.<span class="property">foo</span></span><br><span class="line"><span class="number">07</span> &#125;</span><br><span class="line"><span class="number">08</span> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="number">09</span>   obj &amp;&amp; obj.<span class="property">bar</span></span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><p>以<strong>input.js文件为入口</strong>，输出ESM，<strong>输出文件的名字叫作bundle.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> npx rollup input.<span class="property">js</span> -f esm -o bundle.<span class="property">js</span></span><br></pre></td></tr></table></figure><p>bundle.js的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="comment">// bundle.js</span></span><br><span class="line"><span class="number">02</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="number">03</span>   obj &amp;&amp; obj.<span class="property">foo</span></span><br><span class="line"><span class="number">04</span> &#125;</span><br><span class="line"><span class="number">05</span> <span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h4 id="Tree-Shaking中的第二个关键点——副作用"><a href="#Tree-Shaking中的第二个关键点——副作用" class="headerlink" title="Tree-Shaking中的第二个关键点——副作用"></a>Tree-Shaking中的第二个关键点——副作用</h4><p>如果一个<strong>函数产生了副作用</strong>，那么就<strong>不会被消除</strong>。</p><p><strong>副作用：当调用函数的时候会对外界产生影响</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="comment">//input.js</span></span><br><span class="line"><span class="number">02</span> <span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="number">03</span></span><br><span class="line"><span class="number">04</span> <span class="comment">/*#__PURE__*/</span> <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>注释代码 &#x2F;<em>#<strong>PURE</strong></em>&#x2F;，其作用就是告诉 rollup.js,对于foo函数的调用不会产生副作用</p><p>IIFE格式的资源：iife 立刻调用的函数表达式</p><p>ESM格式的资源：esm</p><p>vue.esm-browser.js中的-browser字样的ESM资源是直接给</p><p>cjs格式的资源：cjs 全称：CommonJS</p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue javascript ecmascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目初始化</title>
      <link href="/2023/05/30/%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2023/05/30/%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="项目初始化-资源准备"><a href="#项目初始化-资源准备" class="headerlink" title="项目初始化 资源准备"></a>项目初始化 资源准备</h3><ol><li><p>初始化工程和安装</p></li><li><p>完成基础项目配置：名字，图标，应用id</p></li><li><p>核对设计稿，准备资源图片，导入图片</p></li></ol><h3 id="项目配置TypeScript"><a href="#项目配置TypeScript" class="headerlink" title="项目配置TypeScript"></a>项目配置TypeScript</h3><ol><li><p>安装 TypeScript</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript</span><br></pre></td></tr></table></figure></li><li><p>生成tsconfig.json</p><ol><li><pre><code>tsc --init<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.  安装类型申明（众多）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>npm i –save-dev @types&#x2F;react @types&#x2F;react-native</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### AsyncStorage ：数据存储</span><br><span class="line"></span><br><span class="line">1.  集成async-storage</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@react-native-async-storage&#x2F;async-storage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.  保存数据：AsyncStorage.setItem\(\)</span><br><span class="line"></span><br><span class="line">3.  读取数据：AsyncStorage.getItem\(\)</span><br><span class="line"></span><br><span class="line">### 前期重点：路由管理</span><br><span class="line"></span><br><span class="line">1.  集成react-navigation</span><br><span class="line"></span><br><span class="line">    1.  ```</span><br><span class="line">        npm i @react-navigation/bottom-tabs</span><br><span class="line">        npm i @react-navigation/native</span><br><span class="line">        npm i @react-navigation/stack</span><br><span class="line">        npm i react-native-gesture-handler</span><br><span class="line">        npm i react-native-safe-area-context</span><br><span class="line">        npm i react-native-screens</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>页面跳转</p></li><li><p>页面替换</p></li><li><p>页面回退</p></li></ol><h3 id="构建导航栈"><a href="#构建导航栈" class="headerlink" title="构建导航栈"></a>构建导航栈</h3><ol><li><p>在App.tsx根节点构建导航栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import type &#123;PropsWithChildren&#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line"> SafeAreaView,</span><br><span class="line"> StatusBar</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line">import &#123; SafeAreaProvider &#125; from &#x27;react-native-safe-area-context&#x27;;</span><br><span class="line">import  axios  from &#x27;axios&#x27;;</span><br><span class="line">import &#123; Button &#125; from &#x27;@rneui/base&#x27;;</span><br><span class="line">import &#123; NavigationContainer &#125; from &#x27;@react-navigation/native&#x27;;</span><br><span class="line">import &#123; createStackNavigator &#125; from &#x27;@react-navigation/stack&#x27;;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">import PageA from &#x27;./src/modules/PageA&#x27;;</span><br><span class="line">import PageB from &#x27;./src/modules/PageB&#x27;;</span><br><span class="line">​</span><br><span class="line">const Stack = createStackNavigator();</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">function App() : JSX.Element&#123;</span><br><span class="line">​</span><br><span class="line"> return (</span><br><span class="line">   &lt;SafeAreaProvider&gt;</span><br><span class="line">     &lt;StatusBar</span><br><span class="line">       barStyle=&#123;&#x27;dark-content&#x27;&#125;</span><br><span class="line">       backgroundColor=&#123;&#x27;white&#x27;&#125;</span><br><span class="line">     /&gt;</span><br><span class="line">     &lt;NavigationContainer&gt;</span><br><span class="line">       &lt;Stack.Navigator initialRouteName=&#x27;PageA&#x27;&gt;</span><br><span class="line">         &lt;Stack.Screen</span><br><span class="line">           name=&quot;PageA&quot;</span><br><span class="line">           component=&#123;PageA&#125;</span><br><span class="line">           options=&#123;&#123;</span><br><span class="line">​</span><br><span class="line">           &#125;&#125;</span><br><span class="line">         /&gt;</span><br><span class="line">         &lt;Stack.Screen</span><br><span class="line">           name=&quot;PageB&quot;</span><br><span class="line">           component=&#123;PageB&#125;</span><br><span class="line">           options=&#123;&#123;</span><br></pre></td></tr></table></figure></li></ol><p>}}<br>         &#x2F;&gt;<br>       &lt;&#x2F;Stack.Navigator&gt;<br>     </NavigationContainer><br>   </SafeAreaProvider><br>);<br>}<br>​<br>export default App;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.  配置导航栈属性</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>cardStyle:&#123;elevation:1,&#125; // 页面层级提升一层&lt;Stack.Screen           name=&quot;PageB&quot;           component=&#123;PageB&#125;           options=&#123;&#123;                 headerShown:false,                 ...TransitionPresets.RevealFromBottomAndroid, // 页面跳转的过渡               &#125;&#125;         /&gt;```</code></pre><h3 id="欢迎页面，登陆页面"><a href="#欢迎页面，登陆页面" class="headerlink" title="欢迎页面，登陆页面"></a>欢迎页面，登陆页面</h3><ol><li><p>开发欢迎页面，并设置3秒倒计时</p></li><li><p>开发登陆页面，并设置3秒倒计时</p></li><li><p>三页面连续跳转</p></li></ol><h3 id="细化登录页交互"><a href="#细化登录页交互" class="headerlink" title="细化登录页交互"></a>细化登录页交互</h3><ol><li><p>显示账号密码输入长度，并对手机号做格式化展示</p></li><li><p>密码可见与不可见切换</p></li><li><p>登录按钮可点击判断</p></li></ol><h3 id="本地nodejs服务"><a href="#本地nodejs服务" class="headerlink" title="本地nodejs服务"></a>本地nodejs服务</h3><ol><li><p>为什么使用本地nodejs服务模拟数据</p></li><li><p>初识egg.js: 初始化，controller，静态资源</p></li><li><p>本地nodejs服务使用方法</p></li></ol><h3 id="封装接口配置"><a href="#封装接口配置" class="headerlink" title="封装接口配置"></a>封装接口配置</h3><ol><li><p>增加apis接口配置文件</p></li><li><p>使用简化接口配置名发起请求</p></li><li><p>拦截接口响应</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react.js 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN系统组件精讲</title>
      <link href="/2023/05/20/RN%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E7%B2%BE%E8%AE%B2/"/>
      <url>/2023/05/20/RN%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E7%B2%BE%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="View：ui构建的基石，一切页面的起点"><a href="#View：ui构建的基石，一切页面的起点" class="headerlink" title="View：ui构建的基石，一切页面的起点"></a>View：ui构建的基石，一切页面的起点</h3><ol><li><p>flexDirection：横向纵向布局</p></li><li><p>flexGrow和flex比较</p><ol><li><p>flexGrow是把剩余空间按照比例分配</p></li><li><p>flex是把父类重新分配，不看自生的宽度或高度</p></li></ol></li><li><p>尺寸属性传数值和百分比</p></li><li><p>position：absolute绝对定位下仍然受父级属性的影响</p></li><li><p>onLayout：布局信息的回调</p></li><li><p>setNativeProps:性能瓶颈下的选择余地</p></li></ol><h3 id="Text-使用占比最高的组件"><a href="#Text-使用占比最高的组件" class="headerlink" title="Text:使用占比最高的组件"></a>Text:使用占比最高的组件</h3><ol><li><p>字体属性：fontSize,fontFamily,fontWeight</p></li><li><p>行数以及修饰模式：numberOfLines，elipsizeMode</p></li><li><p>是否可选中以及选中色号：selectable,selectionColor</p></li><li><p>点击和长按：onPress,onLongPress</p></li><li><p>跟随系统字号：allowFontScaling</p></li><li><p>文字嵌套及注意事项</p></li><li><p>文本对齐：textAlign,textAlignVertical</p></li><li><p>文本装饰：textDecorationStyle,textDecorationLine</p></li><li><p>文本阴影：textShadowColor,textShadowOffset,textShadowRadius一起使用</p></li></ol><h3 id="Image：构建精美ui"><a href="#Image：构建精美ui" class="headerlink" title="Image：构建精美ui"></a>Image：构建精美ui</h3><ol><li><p>图片源的两种类型：source</p><p>&lt;Image source&#x3D;{本地图片路径}&#x2F;&gt;<br>​<br>&lt;Image source&#x3D;{<!-- -->{uri:远程路径}}&#x2F;&gt;</p></li><li><p>缩放模式：resizeMode</p></li><li><p>blurRadius: 曾经的难题现在如此简单，模糊</p></li><li><p>占位图片：defaultSource 图片未加载完整 先用占位图片显示</p></li><li><p>渐入动画时间：fadeDuration</p></li><li><p>加载成功和加载失败：onLoad，onError</p></li><li><p>加载开始和加载结束：onLoadStart，onLoadEnd</p></li><li><p>着色：tintColor</p></li><li><p>api：Image.getSize(),Image.prefetch()</p></li></ol><p>ImageBackgroud: View和Image的结合</p><ol><li><p>style和imageStyle</p></li><li><p>ref和imageRef</p></li></ol><h3 id="TextInput-唯一且强大的输入组件"><a href="#TextInput-唯一且强大的输入组件" class="headerlink" title="TextInput:唯一且强大的输入组件"></a>TextInput:唯一且强大的输入组件</h3><ol><li><p>字体样式：和Text一致</p></li><li><p>自动聚焦；autoFocus和focus()</p></li><li><p>自动失焦：blurOnSubmit和blur()</p></li><li><p>隐藏光标：caretHidden</p></li><li><p>默认输入：defaultValue</p></li><li><p>可编辑性：editable</p></li><li><p>键盘类型：keyboardType</p><ul><li><p>default</p></li><li><p>number-pad</p></li><li><p>decirmal-pad</p></li><li><p>numeric</p></li><li><p>email-address</p></li><li><p>phone-pad</p></li></ul></li><li><p>确定键配置：returnKeyType</p><ul><li><p>done</p></li><li><p>go</p></li><li><p>next</p></li><li><p>search</p></li><li><p>send</p></li></ul></li><li><p>最大长度：maxLength</p><ol><li>多行输入：multiline和numberOfLines</li></ol></li><li><p>焦点回调：onBlur和onFocus</p></li><li><p>内容回调：onChange和onChangeText</p></li><li><p>选中相关：selection，selectionColor，selectTextOnFocus</p></li><li><p>对齐方式：textAlign，textAlignVertical</p></li><li><p>安全模式：secureTextEntry</p></li></ol><h3 id="TouchableOpacity：最好用的点击组件"><a href="#TouchableOpacity：最好用的点击组件" class="headerlink" title="TouchableOpacity：最好用的点击组件"></a>TouchableOpacity：最好用的点击组件</h3><ol><li><p>透明度渐变阈值：activeOpacity</p></li><li><p>点击事件：onPress，onLongPress,delayLongPress</p></li><li><p>点击事件起止：onPressIn,onPressOut</p></li></ol><h3 id="TouchableHighlight-使用略显麻烦"><a href="#TouchableHighlight-使用略显麻烦" class="headerlink" title="TouchableHighlight:使用略显麻烦"></a>TouchableHighlight:使用略显麻烦</h3><ol><li><p>所有点击类事件和TouchableOpacity相同</p></li><li><p>只支持一个子节点</p></li><li><p>使用陷阱：必须复写onPress</p></li></ol><h3 id="TouchableWithoutFeedback：几乎不用"><a href="#TouchableWithoutFeedback：几乎不用" class="headerlink" title="TouchableWithoutFeedback：几乎不用"></a>TouchableWithoutFeedback：几乎不用</h3><ol><li><p>官方文档：除非你有个很好的理由，否则不要用这个组件，所有能够响应触屏操作的元素在触屏后都应该有一个视觉上的反馈</p></li><li><p>只支持一个子节点，且自身不支持样式</p></li></ol><h3 id="Button：使用简单，但样式固定"><a href="#Button：使用简单，但样式固定" class="headerlink" title="Button：使用简单，但样式固定"></a>Button：使用简单，但样式固定</h3><ol><li><p>title：设置按钮显示文字，color：设置按钮颜色</p></li><li><p>disabled：设置按钮不可点击</p></li><li><p>onPress：设置按钮点击事件</p></li></ol><h3 id="强大的Pressable"><a href="#强大的Pressable" class="headerlink" title="强大的Pressable"></a>强大的Pressable</h3><ol><li><p>点击类事件和其他点击组件一致</p></li><li><p>带状态样式和带状态子节点</p></li><li><p>代码简写</p></li></ol><h3 id="ScrollView-基础滚动组件"><a href="#ScrollView-基础滚动组件" class="headerlink" title="ScrollView:基础滚动组件"></a>ScrollView:基础滚动组件</h3><ol><li><p>添加子节点：固定子元素，列表渲染，数组渲染</p><ul><li>&#x2F;&#x2F; 固定子元素渲染</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ScrollView</span> style=&#123;styles.<span class="property">root</span>&#125;&gt;</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ScrollView</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>&#x2F;&#x2F; 列表渲染</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ScrollView</span> style=&#123;styles.<span class="property">root</span>&#125;&gt;</span><br><span class="line">           &#123;array.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> (</span><br><span class="line">                   <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span> <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">index</span>&#125;`&#125;&gt;</span>&#123;`List item $&#123;item&#125;`&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">               )</span><br><span class="line">           &#125;)&#125;</span><br><span class="line">       &lt;/<span class="title class_">ScrollView</span>&gt;</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><ul><li>&#x2F;&#x2F; 数组渲染</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</span><br><span class="line">​</span><br><span class="line">   <span class="comment">// const array = [1,2,3,4,5];</span></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">buildListView</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">       <span class="keyword">const</span> array = [];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">           array.<span class="title function_">push</span>(</span><br><span class="line">               <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.txt&#125;</span> <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item-</span>$&#123;<span class="attr">i</span>&#125;`&#125;&gt;</span>&#123;`List item $&#123;i+1&#125;`&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">           )</span><br><span class="line">       &#125;</span><br><span class="line">​</span><br><span class="line">       <span class="keyword">return</span> array;</span><br><span class="line">   &#125;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">style</span>=<span class="string">&#123;styles.root&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           &#123;buildListView()&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span></span><br><span class="line">   )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内容包裹样式：contentContainerStyle</p></li><li><p>滚动键盘消失：keyboardDismissMode</p></li><li><p>点击收起键盘：keyboardShouldPersistTaps</p></li><li><p>滚动开始和结束：onMomentumScrollBegin&#x2F;End</p></li><li><p>滚动距离监听：onScroll(IOS:ScrollEventThrottle)</p></li><li><p>超出滚动：overScrollMode</p></li><li><p>分页滚动：pagingEnabled，滚动方向：horizontal</p></li><li><p>滚动开关：scrollEnable</p></li><li><p>初始滚动：contentOffset</p></li><li><p>是否展示滚动条：showVerticalScrolllndicator&#x2F;Horizontal</p></li><li><p>吸顶元素：stickyHeaderlndices</p></li><li><p>api：scrollTo() scrollToEnd()</p></li></ol><h3 id="FlatList-高性能列表组件"><a href="#FlatList-高性能列表组件" class="headerlink" title="FlatList:高性能列表组件"></a>FlatList:高性能列表组件</h3><ol><li><p>基础使用：data，renderItem，keyExtactor</p></li><li><p>ScrollView属性：内容容器，滚动条，滚动监听，键盘模式等</p></li><li><p>横向纵向：horizontal</p></li><li><p>表头：ListHeaderComponent</p></li><li><p>表尾：ListFooterComponent</p></li><li><p>空元素：ListEmptyComponent</p></li><li><p>分隔线元素：ItemSeparatorComponent</p></li><li><p>初始化渲染元素：initialNumToRender</p></li><li><p>反向：inverted</p></li><li><p>多列排布：numColumns</p></li><li><p>可见元素回调：onViewableItemsChanged</p></li><li><p>滚动到指定元素：scrollToIndex(),scrollToItem()不推荐</p></li><li><p>滚动到指定距离：scrollToOffset()</p></li><li><p>滚动到底：scrollToEnd()</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React-Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react native react.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN系统精讲-----基础了解</title>
      <link href="/2023/05/06/RN%E7%B3%BB%E7%BB%9F%E7%B2%BE%E8%AE%B2-----%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/"/>
      <url>/2023/05/06/RN%E7%B3%BB%E7%BB%9F%E7%B2%BE%E8%AE%B2-----%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h2 id="原生基础"><a href="#原生基础" class="headerlink" title="原生基础"></a>原生基础</h2><h3 id="安装SDK与Tools"><a href="#安装SDK与Tools" class="headerlink" title="安装SDK与Tools"></a>安装SDK与Tools</h3><p>preference &gt; appearance &gt; systemSetting &gt; Android sdk</p><h3 id="如何连接设备，以及开发中的常用的adb命令"><a href="#如何连接设备，以及开发中的常用的adb命令" class="headerlink" title="如何连接设备，以及开发中的常用的adb命令"></a>如何连接设备，以及开发中的常用的adb命令</h3><ol><li><p>USB连接设备</p><p>adb devices 查看连接设备</p></li><li><p>wifi网络连接设备</p><p>adb connect ip（手机自己的ip地址，可以通过设置-&gt;关于手机-&gt;状态信息-&gt;ip地址）</p><p>adb disconnect ip (断开连接)</p></li><li><p>adb启动，停止，查看设备，端口映射，进入沙盒</p><p>adb kill-server 停止</p><p>adb start-server 启动</p><p>adb devices 查看设备</p><p>adb reverse tcp:8081 tcp:8081 端口映射</p><p>adb shell 进入沙盒</p><p>ls 拆看详细</p><p>cd sdcard&#x2F; 进入sd卡</p><p>adb push 文件 上传到手机上</p><p>adb pull 文件 把文件拉出来 弄到电脑</p></li></ol><h3 id="移动端ui结构和设备特性"><a href="#移动端ui结构和设备特性" class="headerlink" title="移动端ui结构和设备特性"></a>移动端ui结构和设备特性</h3><ol><li><p>移动端应用ui结构</p><ul><li><img src="https://img-blog.csdnimg.cn/a74676a7d41b45afacd651dd8becd405.png"></li></ul></li><li><p>移动端特有的交互形式</p></li><li><p>移动端页面载体</p><ul><li><p><img src="https://img-blog.csdnimg.cn/a11c675fee3d45ca93f376ffd46171f6.png"></p></li><li><p>弹窗</p><pre><code>- ![](https://img-blog.csdnimg.cn/a99e27ff00f141379d175a61e1856b96.png)</code></pre></li></ul></li></ol><h3 id="RN开发中常见的原生文件"><a href="#RN开发中常见的原生文件" class="headerlink" title="RN开发中常见的原生文件"></a>RN开发中常见的原生文件</h3><ol><li><p>配置：manifest(系统权限，第三方原数据) gradle(打包构建，RN原生的依赖)</p></li><li><p>应用：Application(应用初始化)，String(应用名称)，mipmap(应用的图标)</p></li><li><p>桥接：ReactPackage,ReactModule,ViewManager</p></li></ol><h3 id="RN和原生组件对应"><a href="#RN和原生组件对应" class="headerlink" title="RN和原生组件对应"></a>RN和原生组件对应</h3><p><img src="https://img-blog.csdnimg.cn/60ad85b237cc4792872a61572ee89529.png"></p><h3 id="原生开发语言"><a href="#原生开发语言" class="headerlink" title="原生开发语言"></a>原生开发语言</h3><ol><li><p>Android ： Java vs Kotlin</p></li><li><p>IOS： OC vs Swift</p></li></ol><h3 id="移动端应用发布"><a href="#移动端应用发布" class="headerlink" title="移动端应用发布"></a>移动端应用发布</h3><ol><li><p>debug包和release包</p></li><li><p>应用签名：生成和使用</p><ol><li>android studio生成：</li></ol><p>Build-&gt; Generate Signed Bundle &#x2F; APK -&gt; APK -&gt; Create New</p><p>选中android工程 点f4 -&gt;Signing Configs -&gt;新添加release</p></li><li><p>国内主流应用市场：AppStore + 华米OV</p></li></ol><h3 id="移动端特有的生产热修复机制"><a href="#移动端特有的生产热修复机制" class="headerlink" title="移动端特有的生产热修复机制"></a>移动端特有的生产热修复机制</h3><ol><li><p>热修复机制的产生的原因</p></li><li><p>RN热修复框架选择</p><ol><li><p>(<a href="https://pushy.reactnative.cn/" title="Pushy - 极速热更新 (reactnative.cn)">Pushy - 极速热更新 (reactnative.cn)</a>)</p></li><li><p><a href="https://appcenter.ms/sign-in" title="Visual Studio App Center | iOS, Android, Xamarin &amp; React Native | Sign In">Visual Studio App Center | iOS, Android, Xamarin &amp; React Native | Sign In</a></p></li></ol></li><li><p>热修复应用场景和注意事项</p></li></ol><h3 id="移动端设备版本兼容选择"><a href="#移动端设备版本兼容选择" class="headerlink" title="移动端设备版本兼容选择"></a>移动端设备版本兼容选择</h3><ol><li><p>Android</p><ul><li><p>尺寸： 1080 * 1920 以上</p></li><li><p>系统版本：安卓 5.0 以上</p></li></ul></li><li><p>IOS</p><ul><li><p>尺寸：375 * 667 以上</p></li><li><p>系统版本：IOS 10 以上</p></li></ul></li></ol><h2 id="工程结构和React必备知识"><a href="#工程结构和React必备知识" class="headerlink" title="工程结构和React必备知识"></a>工程结构和React必备知识</h2><h3 id="工程目录结构：了解关键文件的作用"><a href="#工程目录结构：了解关键文件的作用" class="headerlink" title="工程目录结构：了解关键文件的作用"></a>工程目录结构：了解关键文件的作用</h3><ol><li><p>index.js . App.js</p></li><li><p>package.json,package-lock.json</p></li><li><p>babel.config.js app.json</p></li><li><p>&#x2F;node_modules</p></li><li><p>&#x2F;android &#x2F;ios</p></li></ol><h3 id="构建通用源码目录结构"><a href="#构建通用源码目录结构" class="headerlink" title="构建通用源码目录结构"></a>构建通用源码目录结构</h3><p><img src="https://img-blog.csdnimg.cn/a68261409dc0469db911ffd547722ac2.png"></p><h3 id="入口函数，export和import"><a href="#入口函数，export和import" class="headerlink" title="入口函数，export和import"></a>入口函数，export和import</h3><ol><li><p>index.js</p></li><li><p>自定义模块导出</p></li><li><p>使用自定义模块导入</p></li></ol><h3 id="class组件和函数式组件"><a href="#class组件和函数式组件" class="headerlink" title="class组件和函数式组件"></a>class组件和函数式组件</h3><ol><li><p>class组件</p><ul><li><p>有状态，每次都是修改的同一个状态</p></li><li><p>基于生命周期的管理</p></li><li><p>面向对象的好处：易于理解，适合新手</p></li></ul></li><li><p>函数式hi组件</p><ul><li><p>无状态，每次刷新都是生成一个新的状态</p></li><li><p>基于状态变化的管理</p></li><li><p>函数式的好处：简洁，模块代码少，易于复用</p></li></ul></li></ol><p>class组件生命周期和常规写法</p><ol><li><p>class组件的标准写法和组件生命周期</p><blockquote><p>import React from “react”;<br>import { View } from “react-native”;</p><p>class ClassView extends React.Component{</p><p>constructor(props){<br>        super(props);<br>        console.log(‘constructor…’);<br>    }</p><p>componentDidMount(){<br>        console.log(“componentDidMount….”);<br>    }</p><p>componentWillUnmount(){<br>        console.log(“componentWillUnmount…”);<br>    }</p><p>render(){<br>        console.log(“render….”);<br>        return(<br>            &lt;View style&#x3D;{<!-- -->{width:200,height:200,backgroundColor:’aqua’}}&gt;</p><p>&lt;&#x2F;View&gt;<br>        )<br>    } &gt; }</p><p>export default ClassView;</p></blockquote></li><li><p>props与state管理ui数据</p><blockquote><p>class ClassView extends React.Component{</p><p>constructor(props){<br>        super(props);</p><p>this.state&#x3D;{<br>            address:”江苏省南京市”,</p><p>}<br>    }</p><p>componentDidMount(){<br>        setTimeout(()&#x3D;&gt;{this.setState({<br>            address:”河南省郑州市”<br>        })},2000)<br>    }</p><p>render(){<br>        const {name,age,level} &#x3D; this.props<br>        const {address} &#x3D; this.state<br>        &#x2F;&#x2F; console.log(`name&#x3D;${name},age&#x3D;${age},level&#x3D;${level}`);<br>        return(<br>            &lt;View style&#x3D;{<!-- -->{width:’100%‘,height:200,backgroundColor:’aqua’}}&gt;<br>                &lt;Text&gt;{name}&lt;&#x2F;Text&gt;<br>                &lt;Text&gt;{age}&lt;&#x2F;Text&gt;<br>                &lt;Text&gt;{level}&lt;&#x2F;Text&gt;<br>                &lt;Text&gt;{address}&lt;&#x2F;Text&gt;<br>            &lt;&#x2F;View&gt;<br>        )<br>    } &gt; }</p></blockquote><p>父组件</p><blockquote><p>const App &#x3D; ()&#x3D;&gt;{<!-- --></p><p>const [showClassView,setShowClassView] &#x3D; useState(true);</p><p>&#x2F;&#x2F; useEffect(()&#x3D;&gt;{<!-- --><br>  &#x2F;&#x2F;   setTimeout(()&#x3D;&gt;{<!-- --><br>  &#x2F;&#x2F;     setShowClassView(false)<br>  &#x2F;&#x2F;   },2000)<br>  &#x2F;&#x2F; },[])</p><p>return (<br>    &lt;View&gt;<br>      &lt;ClassView name&#x3D;”zhangsan” age&#x3D;{12} level&#x3D;”top”&gt;&lt;&#x2F;ClassView&gt;<br>    &lt;&#x2F;View&gt;<br>  );<br>}</p></blockquote></li><li><p>state和setState</p></li></ol><h3 id="函数式组件的优势和常用hook"><a href="#函数式组件的优势和常用hook" class="headerlink" title="函数式组件的优势和常用hook"></a>函数式组件的优势和常用hook</h3><ol><li><p>函数式组件的3种写法</p><blockquote><p>import React from “react”<br>import {View,Text} from ‘react-native’</p><p>export default ()&#x3D;&gt; {</p><p>return (<br>        &lt;View style&#x3D;{<!-- -->{width:’100%‘,height:200,backgroundColor:’pink’}}&gt;<br>            &lt;Text&gt;FunctionView&lt;&#x2F;Text&gt;<br>        &lt;&#x2F;View&gt;<br>    );<br>}</p><p>function fun1(){<br>    return (<br>        &lt;View style&#x3D;{<!-- -->{width:’100%‘,height:200,backgroundColor:’pink’}}&gt;<br>            &lt;Text&gt;FunctionView&lt;&#x2F;Text&gt;<br>        &lt;&#x2F;View&gt;<br>    );<br>}</p><p>const fun2 &#x3D; ()&#x3D;&gt;{<br>    return (<br>        &lt;View style&#x3D;{<!-- -->{width:’100%‘,height:200,backgroundColor:’pink’}}&gt;<br>            &lt;Text&gt;FunctionView&lt;&#x2F;Text&gt;<br>        &lt;&#x2F;View&gt;<br>    );<br>}</p></blockquote></li><li><p>props和useState管理ui数据</p><blockquote><p>export default (props)&#x3D;&gt; {</p><p>const {name ,age,level} &#x3D; props<br>    &#x2F;&#x2F; console.log(`name&#x3D;${name},age&#x3D;${age},level&#x3D;${level}`);</p><p>const [address,setAddress] &#x3D; useState(“河南省郑州市”);</p><p>&#x2F;&#x2F;  useEffect 可以写多个<br>    useEffect(()&#x3D;&gt;{<br>        setTimeout(()&#x3D;&gt;{<br>            setAddress(‘浙江省杭州市’)<br>        },2000)<br>    },[])</p><p>useEffect(()&#x3D;&gt;{<br>        console.log(`address&#x3D;${address}`);<br>    },[address])</p><p>return (<br>        &lt;View style&#x3D;{<!-- -->{width:’100%‘,height:200,backgroundColor:’pink’}}&gt;<br>            &lt;Text style&#x3D;{<!-- -->{fontSize:20,color:’black’}}&gt;<br>                {`name&#x3D;${name},age&#x3D;${age},level&#x3D;${level}`}<br>            &lt;&#x2F;Text&gt;<br>            &lt;Text style&#x3D;{<!-- -->{fontSize:20,color:”yellow”}}&gt;{`address&#x3D;${address}`}&lt;&#x2F;Text&gt;<br>        &lt;&#x2F;View&gt;<br>    );<br>}</p></blockquote></li><li><p>常用hook：useState,useEffect,useRef,useWindowDimension,useColorScheme</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> React-Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react native react.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2023/04/23/Node.js/"/>
      <url>/2023/04/23/Node.js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h1><h2 id="初识Node-js"><a href="#初识Node-js" class="headerlink" title="初识Node.js"></a>初识Node.js</h2><h3 id="JavaScript运行环境"><a href="#JavaScript运行环境" class="headerlink" title="JavaScript运行环境"></a>JavaScript运行环境</h3><ol><li><p>V8 引擎负责解析和执行Javascript的代码</p></li><li><p>内置API是由运行环境提供的特殊接口，只能在所属的运行环境中被调用</p></li></ol><h3 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h3><p><strong>Node.js</strong>是一个基于Chrome V8 引擎的<strong>JavaScript运行环境</strong></p><ol><li><p>浏览器是JavaScript的前端运行环境</p></li><li><p>Node.js是JavaScript的后端运行环境</p></li><li><p>Node.js中无法调用DOM和BOM等浏览器内置的API</p></li></ol><h3 id="Node-js环境的安装"><a href="#Node-js环境的安装" class="headerlink" title="Node.js环境的安装"></a>Node.js环境的安装</h3><ol><li><p>查看已安装的node.js的版本号</p><ol><li>代开终端，中终端输入node -v，即可查看node.js的版本号</li></ol></li></ol><h3 id="在Node-js环境中执行JavaScript代码"><a href="#在Node-js环境中执行JavaScript代码" class="headerlink" title="在Node.js环境中执行JavaScript代码"></a>在Node.js环境中执行JavaScript代码</h3><ol><li><p>代开终端</p></li><li><p>输入node要执行的js文件的路径</p></li></ol><h2 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h2><ol><li><p>fs模块是node.js官方提供的，用来操作文件的模块</p></li><li><p>fs.readFile()方法，来读取指定文件中的内容</p></li><li><p>fs.writeFile()方法，用来指定的文件中写入内容</p></li><li><p>在JavaScript代码中，使用fs模块来操作文件，则需要使用如下的方式导入</p><p>const fs &#x3D; require(‘fs’)</p></li><li><p>fs.readFile()的语法格式</p><p>fs.readFile(path[,options],callback)</p><ol><li><p>参数1：必选参数，字符串，表示文件的路径</p></li><li><p>参数2：可选参数，表示以什么编码格式来读取文件</p></li><li><p>参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果</p></li><li><p>判断文件是否读取成功，判断err对象是否为null</p></li></ol></li><li><p>fs.writeFile()的语法格式</p><p>fs.writeFile(file,data[,options],callback)</p><ol><li><p>参数1：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径</p></li><li><p>参数2：必选参数，表示要写入的内容</p></li><li><p>参数3：可选参数，表示以什么格式写入文件内容，默认值是utf8</p></li><li><p>参数4：必选参数，文件写入完成后的回调函数</p></li><li><p>判断文件是否读取成功，判断err对象是否为null</p></li></ol></li><li><p>fs 模块 - 路径动态拼接的问题</p><ol><li>使用__dirname 表示当前文件的目录</li></ol></li></ol><h2 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h2><ol><li><p>path模块是node.js官方提供的，用来处理路径的模块</p></li><li><p>path.join()方法，用来讲多个路径片段拼接成一个完成的路径字符串</p></li><li><p>__dirname 表示当前文件所处的目录</p></li><li><p>path.basename()方法，用来从路径字符串中，将文件名解析出来</p></li></ol><p>path.join([..paths])</p><p>参数：</p><ul><li><p>…paths&lt;String&gt; 路径片段的序列</p><ul><li>返回值&lt;String&gt;</li></ul></li></ul><p>path.basename(path[,ext])</p><p>参数：</p><ul><li><p>path&lt;String&gt; 必选参数，表示一个路径的字符串</p></li><li><p>ext&lt;String&gt; 可选参数，表示文件扩展名</p></li></ul><h2 id="创建最基本的web服务器"><a href="#创建最基本的web服务器" class="headerlink" title="创建最基本的web服务器"></a>创建最基本的web服务器</h2><h3 id="步骤1-导入http模块"><a href="#步骤1-导入http模块" class="headerlink" title="步骤1 导入http模块"></a>步骤1 导入http模块</h3><p>const http &#x3D; require(‘http’)</p><h3 id="步骤2-创建web服务器实例"><a href="#步骤2-创建web服务器实例" class="headerlink" title="步骤2 创建web服务器实例"></a>步骤2 创建web服务器实例</h3><p>调用http.createServer() 方法，快速创建一个web服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br></pre></td></tr></table></figure><h3 id="步骤3-为服务器实例绑定request事件"><a href="#步骤3-为服务器实例绑定request事件" class="headerlink" title="步骤3 为服务器实例绑定request事件"></a>步骤3 为服务器实例绑定request事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用服务器实例.on()方法，为服务器绑定一个request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只要有客户端来请求我们自己的服务器，就会触发request事件，从而调用事件的处理函数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Someone visit our web server&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="步骤4-启动服务器"><a href="#步骤4-启动服务器" class="headerlink" title="步骤4 启动服务器"></a>步骤4 启动服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用server.listen(端口号，cb回调)方法，即可启动web服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http server running at http://127.0.0.1&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h3><p>只要服务器接收到了客户端的请求，就会调用通过server.on()为服务器绑定的request事件处理函数，访问与客户端相关的数据或属性，可以用下面的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req是请求对象，它包含了与客户端相关的数据和属性，例如</span></span><br><span class="line">  <span class="comment">// req.url 是客户端请求的URL地址</span></span><br><span class="line">  <span class="comment">// req.method 是客户端的method请求类型</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>,and request method is <span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="res-响应对象"><a href="#res-响应对象" class="headerlink" title="res 响应对象"></a>res 响应对象</h3><p>在服务器的request事件处理函数中，如果相访问与服务器相关的数据或属性，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// res是响应对象，它包含了与服务器相关的数据和属性</span></span><br><span class="line">  <span class="comment">// 要发送到客户端的字符串</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>, and request method is <span class="subst">$&#123;req.method&#125;</span>`</span> <span class="comment">// res.end() 方法的作用：</span></span><br><span class="line">  <span class="comment">// 向客户端发送指定的内容，并结束这次请求的处理过程</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决中文乱码的问题"><a href="#解决中文乱码的问题" class="headerlink" title="解决中文乱码的问题"></a>解决中文乱码的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// res是响应对象，它包含了与服务器相关的数据和属性</span></span><br><span class="line">  <span class="comment">// 要发送到客户端的字符串</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`您请求的url地址是 <span class="subst">$&#123;req.url&#125;</span>, 请求的method类型是 <span class="subst">$&#123;req.method&#125;</span>`</span> <span class="comment">// 为了防止中文显示乱码的问题，需要设置响应头Content-Type 的值为text/html;charset=utf-8</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>) <span class="comment">// res.end() 方法的作用：</span></span><br><span class="line">  <span class="comment">// 向客户端发送指定的内容，并结束这次请求的处理过程</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="根据不同的url响应不同的html内容"><a href="#根据不同的url响应不同的html内容" class="headerlink" title="根据不同的url响应不同的html内容"></a>根据不同的url响应不同的html内容</h2><h3 id="核心实现步骤"><a href="#核心实现步骤" class="headerlink" title="核心实现步骤"></a>核心实现步骤</h3><ol><li><p>获取请求的url地址</p></li><li><p>设置默认的响应内容为404 Not Found</p></li><li><p>判断用户请求的是否为&#x2F; 或 &#x2F;index.html首页</p></li><li><p>判断用户请求的是否为&#x2F;about.html关于页面</p></li><li><p>设置Content-Type 响应头，防止中文乱码</p></li><li><p>使用res.end()把内容响应给客户端</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span> <span class="comment">// 1.获取请求的url地址</span></span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span> <span class="comment">// 2.设置默认的内容为404 Not found</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&quot;/&quot;</span> || url === <span class="string">&quot;/index.html&quot;</span>) &#123;</span><br><span class="line">    content = <span class="string">&quot;&lt;h1&gt;首页&lt;/h1&gt;&quot;</span> <span class="comment">// 3.用户请求的是首页</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/about.html&quot;</span>) &#123;</span><br><span class="line">    content = <span class="string">&quot;&lt;h1&gt;关于页面&lt;/h1&gt;&quot;</span> <span class="comment">// 4.用户请求的是关于页面</span></span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>) <span class="comment">// 5.设置Content-Type 响应头 防止中文乱码</span></span><br><span class="line">  res.<span class="title function_">end</span>(content) <span class="comment">// 6.把内容发送给客户端</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="案例-实现clock时钟的web服务器"><a href="#案例-实现clock时钟的web服务器" class="headerlink" title="案例- 实现clock时钟的web服务器"></a>案例- 实现clock时钟的web服务器</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>导入需要的模块</p></li><li><p>创建基本的web服务器</p></li><li><p>将资源的请求url地址映射为文件的存放路径</p></li><li><p>读取文件内容并响应给客户端</p></li><li><p>优化资源的请求路径</p></li></ol><h3 id="步骤1-导入需要的模块"><a href="#步骤1-导入需要的模块" class="headerlink" title="步骤1 - 导入需要的模块"></a>步骤1 - 导入需要的模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="步骤2-创建基本的web服务器"><a href="#步骤2-创建基本的web服务器" class="headerlink" title="步骤2 - 创建基本的web服务器"></a>步骤2 - 创建基本的web服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server running at http://127.0.0.1&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="步骤3-将资源的请求url地址映射为文件的存放路径"><a href="#步骤3-将资源的请求url地址映射为文件的存放路径" class="headerlink" title="步骤3 - 将资源的请求url地址映射为文件的存放路径"></a>步骤3 - 将资源的请求url地址映射为文件的存放路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.1 获取客户端请求的url地址</span></span><br><span class="line"><span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line"><span class="comment">// 3.2 把请求的url地址，映射为本地文件的存放路径</span></span><br><span class="line">cosnt fpath = path.<span class="title function_">join</span>(__dirname,url)</span><br></pre></td></tr></table></figure><h3 id="步骤4-读取文件的内容并响应给客户端"><a href="#步骤4-读取文件的内容并响应给客户端" class="headerlink" title="步骤4 - 读取文件的内容并响应给客户端"></a>步骤4 - 读取文件的内容并响应给客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(fpath, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, date</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&quot;404 Not Found&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">end</span>(date)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="步骤5-优化资源的请求路径"><a href="#步骤5-优化资源的请求路径" class="headerlink" title="步骤5 - 优化资源的请求路径"></a>步骤5 - 优化资源的请求路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.1 预定义空白的文件存放路径</span></span><br><span class="line"><span class="keyword">let</span> fpath = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> (url === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">  fpath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./clock/index.html&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fpath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./colck&quot;</span>, url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript----面向对象</title>
      <link href="/2023/04/15/TypeScript----%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/04/15/TypeScript----%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li><p>举例来说：</p><ul><li><p>操作浏览器要使用window对象</p></li><li><p>操作网页要使用document对象</p></li><li><p>操作控制台要使用console对象</p></li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h2 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">  属性名: 类型;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">参数: 类型</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.属性名 = 参数;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  方法名()&#123;</span><br><span class="line">      ....</span><br><span class="line">  &#125;</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><ul><li><pre><code class="TypeScript">   class Person&#123;   name: string;   age: number;   ​   constructor(name: string, age: number)&#123;       this.name = name;       this.age = age;   &#125;   ​   sayHello()&#123;       console.log(`大家好，我是$&#123;this.name&#125;`);   &#125;   &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用类：</span><br><span class="line"></span><br><span class="line">  - ```TypeScript</span><br><span class="line">    const p = new Person(&#x27;孙悟空&#x27;, 18);</span><br><span class="line">    p.sayHello();</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="2、面向对象的特点"><a href="#2、面向对象的特点" class="headerlink" title="2、面向对象的特点"></a>2、面向对象的特点</h2><ul><li><p>封装</p><ul><li><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p></li><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li><p>public（默认值），可以在类、子类和对象中修改</p></li><li><p>protected ，可以在类、子类中修改</p></li><li><p>private ，可以在类中修改</p></li></ul></li><li><p>示例：</p><ul><li><p>public</p><pre><code> - ```TypeScript   class Person&#123;</code></pre><p>public name: string; &#x2F;&#x2F; 写或什么都不写都是public<br>   public age: number;<br>​<br>   constructor(name: string, age: number){<br>       this.name &#x3D; name; &#x2F;&#x2F; 可以在类中修改<br>       this.age &#x3D; age;<br>  }<br>​<br>   sayHello(){<br>       console.log(<code>大家好，我是$&#123;this.name&#125;</code>);<br>  }<br>}<br>​<br>class Employee extends Person{<br>   constructor(name: string, age: number){<br>       super(name, age);<br>       this.name &#x3D; name; &#x2F;&#x2F;子类中可以修改<br>  }<br>}<br>​<br>const p &#x3D; new Person(‘孙悟空’, 18);<br>p.name &#x3D; ‘猪八戒’;&#x2F;&#x2F; 可以通过对象修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- protected</span><br><span class="line"></span><br><span class="line">       - ```TypeScript</span><br><span class="line">         class Person&#123;</span><br><span class="line"></span><br><span class="line">  protected name: string;</span><br><span class="line">     protected age: number;</span><br><span class="line">  ​</span><br><span class="line">     constructor(name: string, age: number)&#123;</span><br><span class="line">         this.name = name; // 可以修改</span><br><span class="line">         this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  ​</span><br><span class="line">     sayHello()&#123;</span><br><span class="line">         console.log(`大家好，我是$&#123;this.name&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ​</span><br><span class="line">  class Employee extends Person&#123;</span><br><span class="line">  ​</span><br><span class="line">     constructor(name: string, age: number)&#123;</span><br><span class="line">         super(name, age);</span><br><span class="line">         this.name = name; //子类中可以修改</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ​</span><br><span class="line">  const p = new Person(&#x27;孙悟空&#x27;, 18);</span><br><span class="line">  p.name = &#x27;猪八戒&#x27;;// 不能修改</span><br></pre></td></tr></table></figure></li><li><p>private</p><pre><code> - ```TypeScript   class Person&#123;</code></pre><p>private name: string;<br>   private age: number;<br>​<br>   constructor(name: string, age: number){<br>       this.name &#x3D; name; &#x2F;&#x2F; 可以修改<br>       this.age &#x3D; age;<br>  }<br>​<br>   sayHello(){<br>       console.log(<code>大家好，我是$&#123;this.name&#125;</code>);<br>  }<br>}<br>​<br>class Employee extends Person{<br>​<br>   constructor(name: string, age: number){<br>       super(name, age);<br>       this.name &#x3D; name; &#x2F;&#x2F;子类中不能修改<br>  }<br>}<br>​<br>const p &#x3D; new Person(‘孙悟空’, 18);<br>p.name &#x3D; ‘猪八戒’;&#x2F;&#x2F; 不能修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 属性存取器</span><br><span class="line"></span><br><span class="line">  - 对于一些不希望被任意修改的属性，可以将其设置为private</span><br><span class="line"></span><br><span class="line">  - 直接将其设置为private将导致无法再通过对象修改其中的属性</span><br><span class="line"></span><br><span class="line">  - 我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</span><br><span class="line"></span><br><span class="line">  - 读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">         - ```TypeScript</span><br><span class="line">           class Person&#123;</span><br><span class="line"></span><br><span class="line">    private \_name: string;</span><br><span class="line">    ​</span><br><span class="line">       constructor(name: string)&#123;</span><br><span class="line">           this.\_name = name;</span><br><span class="line">      &#125;</span><br><span class="line">    ​</span><br><span class="line">       get name()&#123;</span><br><span class="line">           return this.\_name;</span><br><span class="line">      &#125;</span><br><span class="line">    ​</span><br><span class="line">       set name(name: string)&#123;</span><br><span class="line">           this.\_name = name;</span><br><span class="line">      &#125;</span><br><span class="line">    ​</span><br><span class="line">    &#125;</span><br><span class="line">    ​</span><br><span class="line">    const p1 = new Person(&#x27;孙悟空&#x27;);</span><br><span class="line">    console.log(p1.name); // 通过getter读取name属性</span><br><span class="line">    p1.name = &#x27;猪八戒&#x27;; // 通过setter修改name属性</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态属性</p><ul><li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p></li><li><p>静态属性（方法）使用static开头</p></li><li><p>示例：</p><pre><code> - ```TypeScript   class Tools&#123;</code></pre><p>static PI &#x3D; 3.1415926;</p></li></ul></li></ul></li></ul><p>static sum(num1: number, num2: number){<br>       return num1 + num2<br>  }<br>}<br>​<br>console.log(Tools.PI);<br>console.log(Tools.sum(123, 456));</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- this</span><br><span class="line"></span><br><span class="line">  - 在类中，使用this表示当前对象</span><br><span class="line"></span><br><span class="line">- 继承</span><br><span class="line"></span><br><span class="line">  - 继承时面向对象中的又一个特性</span><br><span class="line"></span><br><span class="line">  - 通过继承可以将其他类中的属性和方法引入到当前类中</span><br><span class="line"></span><br><span class="line">    - 示例：</span><br><span class="line"></span><br><span class="line">           - ```TypeScript</span><br><span class="line">             class Animal&#123;</span><br><span class="line"></span><br><span class="line">      name: string;</span><br><span class="line">         age: number;</span><br><span class="line">      ​</span><br><span class="line">         constructor(name: string, age: number)&#123;</span><br><span class="line">             this.name = name;</span><br><span class="line">             this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ​</span><br><span class="line">      class Dog extends Animal&#123;</span><br><span class="line">      ​</span><br><span class="line">         bark()&#123;</span><br><span class="line">             console.log(`$&#123;this.name&#125;在汪汪叫！`);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ​</span><br><span class="line">      const dog = new Dog(&#x27;旺财&#x27;, 4);</span><br><span class="line">      dog.bark();</span><br></pre></td></tr></table></figure><ul><li><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><ul><li><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p></li><li><p>示例：</p><pre><code> - ```TypeScript   class Animal&#123;</code></pre><p>name: string;<br>   age: number;<br>​<br>   constructor(name: string, age: number){<br>       this.name &#x3D; name;<br>       this.age &#x3D; age;<br>  }<br>​<br>   run(){<br>       console.log(<code>父类中的run方法！</code>);<br>  }<br>}<br>​<br>class Dog extends Animal{<br>​<br>   bark(){<br>       console.log(<code>$&#123;this.name&#125;在汪汪叫！</code>);<br>  }<br>​<br>   run(){<br>       console.log(<code>子类中的run方法，会重写父类中的run方法！</code>);<br>  }<br>}<br>​<br>const dog &#x3D; new Dog(‘旺财’, 4);<br>dog.bark();</p><figure class="highlight plaintext"><figcaption><span>在子类中可以使用super来完成对父类的引用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 抽象类（abstract class）</span><br><span class="line"></span><br><span class="line">  - 抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</span><br><span class="line"></span><br><span class="line">  - ````TypeScript</span><br><span class="line">         abstract class Animal&#123;</span><br><span class="line">       abstract run(): void;</span><br><span class="line">       bark()&#123;</span><br><span class="line">           console.log(&#x27;动物在叫~&#x27;);</span><br><span class="line">       &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         ​</span><br><span class="line">         class Dog extends Animals&#123;</span><br><span class="line">       run()&#123;</span><br><span class="line">           console.log(&#x27;狗在跑~&#x27;);</span><br><span class="line">       &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">    - 使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</span><br><span class="line"></span><br><span class="line">## 3、接口（Interface）</span><br><span class="line"></span><br><span class="line">接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</span><br><span class="line"></span><br><span class="line">- 示例（检查对象类型）：</span><br><span class="line"></span><br><span class="line">  - ```TypeScript</span><br><span class="line">       interface Person&#123;</span><br><span class="line">       name: string;</span><br><span class="line">       sayHello():void;</span><br><span class="line">       &#125;</span><br><span class="line">       ​</span><br><span class="line">       function fn(per: Person)&#123;</span><br><span class="line">       per.sayHello();</span><br><span class="line">       &#125;</span><br><span class="line">       ​</span><br><span class="line">       fn(&#123;name:&#x27;孙悟空&#x27;, sayHello() &#123;console.log(`Hello, 我是 $&#123;this.name&#125;`)&#125;&#125;);</span><br><span class="line">    ```</span><br><span class="line"></span><br><span class="line">    ​</span><br><span class="line"></span><br><span class="line">- 示例（实现）</span><br><span class="line"></span><br><span class="line">  - ```TypeScript</span><br><span class="line">       interface Person&#123;</span><br><span class="line">       name: string;</span><br><span class="line">       sayHello():void;</span><br><span class="line">       &#125;</span><br><span class="line">       ​</span><br><span class="line">       class Student implements Person&#123;</span><br><span class="line">       constructor(public name: string) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       ​</span><br><span class="line">       sayHello() &#123;</span><br><span class="line">           console.log(&#x27;大家好，我是&#x27;+this.name);</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    ```</span><br><span class="line">  -</span><br><span class="line"></span><br><span class="line">## 4、泛型（Generic）</span><br><span class="line"></span><br><span class="line">定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</span><br><span class="line"></span><br><span class="line">- 举个例子：</span><br><span class="line"></span><br><span class="line">  - ```TypeScript</span><br><span class="line">    function test(arg: any): any&#123;</span><br><span class="line">    return arg;</span><br><span class="line">    &#125;</span><br><span class="line">    ```</span><br><span class="line">  - 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span><br><span class="line"></span><br><span class="line">  - 使用泛型：</span><br><span class="line"></span><br><span class="line">  - ```TypeScript</span><br><span class="line">    function test&lt;T&gt;(arg: T): T&#123;</span><br><span class="line">    return arg;</span><br><span class="line">    &#125;</span><br><span class="line">    ```</span><br><span class="line">  - 这里的`&lt;T&gt;`就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</span><br><span class="line"></span><br><span class="line">  - 那么如何使用上边的函数呢？</span><br><span class="line"></span><br><span class="line">    - 方式一（直接使用）：</span><br><span class="line"></span><br><span class="line">      - ```TypeScript</span><br><span class="line">        test(10)</span><br><span class="line">        ```</span><br><span class="line">      - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</span><br><span class="line"></span><br><span class="line">    - 方式二（指定类型）：</span><br><span class="line"></span><br><span class="line">      - ```TypeScript</span><br><span class="line">        test&lt;number&gt;(10)</span><br><span class="line">        ```</span><br><span class="line">      - 也可以在函数后手动指定泛型</span><br><span class="line"></span><br><span class="line">  - 可以同时指定多个泛型，泛型间使用逗号隔开：</span><br><span class="line"></span><br><span class="line">    - ````TypeScript</span><br><span class="line">           function test&lt;T, K&gt;(a: T, b: K): K&#123;</span><br><span class="line">         return b;</span><br><span class="line">           &#125;</span><br><span class="line">           ​</span><br><span class="line">           test&lt;number, string&gt;(10, &quot;hello&quot;);</span><br><span class="line">           ```</span><br></pre></td></tr></table></figure></li><li><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用</p></li></ul></li><li><p>类中同样可以使用泛型：</p><ul><li><pre><code class="TypeScript">     class MyClass&lt;T&gt;&#123;   prop: T;     ​   constructor(prop: T)&#123;       this.prop = prop;   &#125;     &#125;     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    ````</span><br><span class="line"></span><br><span class="line">- 除此之外，也可以对泛型的范围进行约束</span><br><span class="line"></span><br><span class="line">  - ````TypeScript</span><br><span class="line">         interface MyInter&#123;</span><br><span class="line">       length: number;</span><br><span class="line">         &#125;</span><br><span class="line">         ​</span><br><span class="line">         function test&lt;T extends MyInter&gt;(arg: T): number&#123;</span><br><span class="line">       return arg.length;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-Native 创建App项目</title>
      <link href="/2023/04/09/React-Native%20%E5%88%9B%E5%BB%BAApp%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/04/09/React-Native%20%E5%88%9B%E5%BB%BAApp%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="React-Native-创建App项目"><a href="#React-Native-创建App项目" class="headerlink" title="# React-Native 创建App项目"></a># React-Native 创建App项目</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>RN的官方网站</li><li>百度+谷歌</li></ul><h4 id="安装环境介绍"><a href="#安装环境介绍" class="headerlink" title="安装环境介绍"></a>安装环境介绍</h4><ul><li>操作系统：win10系统</li><li>手机：安卓手机真机一部或夜神模拟器</li><li>必须安装的依赖有：Node,JDK,Yarn,Android SDK,Python2</li></ul><h4 id="Node的安装"><a href="#Node的安装" class="headerlink" title="Node的安装"></a>Node的安装</h4><ul><li>先到官网去下载node版本（使用nvm工具安装也可以）</li><li>可以下载最新的稳定版</li><li>以管理员的身份安装</li></ul><h4 id="Yarn的安装"><a href="#Yarn的安装" class="headerlink" title="Yarn的安装"></a>Yarn的安装</h4><p>Yarn是Facebook提供的代替npm的工具，可以加速node模块的下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn -g <span class="comment">//使用npm全局安装yarn</span></span><br></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn - v</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://img-blog.csdnimg.cn/681dbe5f1362499bbb64c38d8f5765c4.png" alt="在这里插入图片描述"></p><h4 id="JDK的安装与配置"><a href="#JDK的安装与配置" class="headerlink" title="JDK的安装与配置"></a>JDK的安装与配置</h4><p>安卓系统的APP离不开JAVA环境，需要下载安装JDK（11版本的）<br><img src="https://img-blog.csdnimg.cn/74acdab363324e809c2c368eabbf6ba0.png" alt="在这里插入图片描述"><br>需要注意的是点击下载之后，或跳转到一个Oracler的登陆页面，得登陆之后才可以下载，如果没有账号可以注册一个，下载完毕之后，以管理员身份打开安装</p><h4 id="JDK的环境变量配置"><a href="#JDK的环境变量配置" class="headerlink" title="JDK的环境变量配置"></a>JDK的环境变量配置</h4><ol><li>右键我的电脑，点属性</li></ol><p><img src="https://img-blog.csdnimg.cn/9a45fc95b62747f2ae19560cd324653a.png" alt="在这里插入图片描述"><br>2.然后点击高级系统设置，在弹出来的对话框点击高级，再点击环境变量<br><img src="https://img-blog.csdnimg.cn/8bc1bc7b2f364ffbb56013c043fff6aa.png" alt="在这里插入图片描述"><br>3.在弹出来的对话框中设置如下<br><img src="https://img-blog.csdnimg.cn/5a74d7d047f04b33b032887c67c98d52.png" alt="在这里插入图片描述"></p><p>4.在系统变量当中找到path项打开，单击下面的编辑，在弹出框中设置如下<img src="https://img-blog.csdnimg.cn/4b769bf26a8a4c8b81d9c71121ebb4e0.png" alt="在这里插入图片描述">5.检查是否安装完成，打开命令行终端，使用命令java与javac检测一下</p><p><img src="https://img-blog.csdnimg.cn/e22f7bc495ed49a2832ffe196a9eb37e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7020dc907da947fa941abffe7075e941.png" alt="在这里插入图片描述"></p><h4 id="Android-SDK的下载与安装"><a href="#Android-SDK的下载与安装" class="headerlink" title="Android SDK的下载与安装"></a>Android SDK的下载与安装</h4><p>我们直接去下载android sdk并进行必要的配置</p><p>1.去这个<a href="https://www.androiddevtools.cn/">https://www.androiddevtools.cn/</a> 官网下载<br><img src="https://img-blog.csdnimg.cn/8a04131a1c04416e999584ff6254feff.png" alt="在这里插入图片描述"><br>以管理员的身份进行安装<br>2.下载依赖选项<br><img src="https://img-blog.csdnimg.cn/c9df775bb7bd40b0bd84ba6030ad4082.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/906be5a75d334fb2828cb8eeb8d6cdf4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d6e4e5e5e8b640fc8b7cf4e3acd4877e.png" alt="在这里插入图片描述"><br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/d73cee7e427548b![%E5%9C%A8%E8%BF%99%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0](https://img-blog.csdnimg.cn/c6117fe7f4524ebd9eb9ceb702db1eb8.png)">https://img-blog.csdnimg.cn/d73cee7e427548b![在这里插入图片描述](https://img-blog.csdnimg.cn/c6117fe7f4524ebd9eb9ceb702db1eb8.png)</a></p><h4 id="Android环境变量的设置"><a href="#Android环境变量的设置" class="headerlink" title="Android环境变量的设置"></a>Android环境变量的设置</h4><p>还是和java环境变量设置的差不多<br><img src="https://img-blog.csdnimg.cn/f2616fa15a8f4001981b608b405fc978.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e69da6e9779742d9814b0a7d7815a535.png" alt="在这里插入图片描述"></p><h4 id="初始化项目和打包APP到手机上"><a href="#初始化项目和打包APP到手机上" class="headerlink" title="初始化项目和打包APP到手机上"></a>初始化项目和打包APP到手机上</h4><p>1.准备一个android手机，通过数据线连接到电脑，设置启用use调试</p><p>2.一般的手机设置中可以直接找到开发者选项进行开启，如果找不到，百度一下<br>3.手机连接电脑成功后，运行检测命令 adb devices<br><img src="https://img-blog.csdnimg.cn/e43e4bd2789a4ec79d4f59876fb40784.png" alt="在这里插入图片描述"><br>4.运行 npx react-native init 项目名称 命令会初始化一个react-native项目，需要联网下载依赖包</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init myApp</span><br></pre></td></tr></table></figure><p>5.使用cd myApp 命令进入此项目的文件夹，确保手机连接下，再输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native run-android</span><br></pre></td></tr></table></figure><p>6.手机出现如下画面，说明打包成功<br><img src="https://img-blog.csdnimg.cn/ac5a2ffcd0fa41b6a742a858dea97bda.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> React-Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react native react.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts-------webpakc打包</title>
      <link href="/2023/04/01/ts-------webpakc%E6%89%93%E5%8C%85/"/>
      <url>/2023/04/01/ts-------webpakc%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="TS—-wabpack打包"><a href="#TS—-wabpack打包" class="headerlink" title="TS—-wabpack打包"></a>TS—-wabpack打包</h3><ul><li><a href="#_1">打包</a></li><li><ul><li><a href="#_3">打包过程</a></li><li><ul><li><a href="#1_4">1.初始化项目</a></li><li><a href="#2_8">2.下载构建工具</a></li><li><a href="#_26"></a></li><li><a href="#3webpackwebpackconfigjs_27">3.根目录下创建webpack的配置文件webpack.config.js</a></li><li><a href="#4tsconfigjson_80">4.根目录下创建tsconfig.json，配置可以根据自己需要</a></li><li><a href="#5packagejson_92">5.修改package.json添加如下配置</a></li><li><a href="#3srctsnpm_run_buildnpm_start_106">3.在src下创建ts文件，并在并命令行执行```npm run build```对代码进行编译，或者执行```npm start```来启动开发服务器</a></li></ul></li></ul></li><li><a href="#Babel_107">Babel</a></li><li><ul><li><a href="#_108">简介</a></li><li><a href="#Babel_110">Babel的使用</a></li><li><ul><li><a href="#1_111">1.安装依赖包</a></li><li><a href="#2webpackconfigjs_123">2.修改webpack.config.js配置文件</a></li></ul></li></ul></li></ul><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p><h2 id="打包过程"><a href="#打包过程" class="headerlink" title="打包过程"></a>打包过程</h2><h3 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1.初始化项目"></a>1.初始化项目</h3><ul><li><p>进入项目根目录，执行命令<code>npm init \-y</code></p></li><li><p>主要作用：创建package.json文件</p></li></ul><h3 id="2-下载构建工具"><a href="#2-下载构建工具" class="headerlink" title="2.下载构建工具"></a>2.下载构建工具</h3><p><code>npm i \-D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code></p><ul><li>共安装了7个包<ul><li>webpack<ul><li>构建工具webpack</li></ul></li><li>webpack-cli<ul><li>webpack的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack的开发服务器</li></ul></li><li>typescript<ul><li>ts编译器</li></ul></li><li>ts-loader<ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li>clean-webpack-plugin<ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul><h3 id="3-根目录下创建webpack的配置文件webpack-config-js"><a href="#3-根目录下创建webpack的配置文件webpack-config-js" class="headerlink" title="3.根目录下创建webpack的配置文件webpack.config.js"></a>3.根目录下创建webpack的配置文件webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">environment</span>: &#123;</span><br><span class="line">      <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;TS测试&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-根目录下创建tsconfig-json，配置可以根据自己需要"><a href="#4-根目录下创建tsconfig-json，配置可以根据自己需要" class="headerlink" title="4.根目录下创建tsconfig.json，配置可以根据自己需要"></a>4.根目录下创建tsconfig.json，配置可以根据自己需要</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-修改package-json添加如下配置"><a href="#5-修改package-json添加如下配置" class="headerlink" title="5.修改package.json添加如下配置"></a>5.修改package.json添加如下配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...略...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在src下创建ts文件，并在并命令行执行npm-run-build对代码进行编译，或者执行npm-start来启动开发服务器"><a href="#3-在src下创建ts文件，并在并命令行执行npm-run-build对代码进行编译，或者执行npm-start来启动开发服务器" class="headerlink" title="3.在src下创建ts文件，并在并命令行执行npm run build对代码进行编译，或者执行npm start来启动开发服务器"></a>3.在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</h3><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p><h2 id="Babel的使用"><a href="#Babel的使用" class="headerlink" title="Babel的使用"></a>Babel的使用</h2><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h3><ul><li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li><li>共安装了4个包，分别是：<ul><li>@babel&#x2F;core<ul><li>babel的核心工具</li></ul></li><li>@babel&#x2F;preset-env<ul><li>babel的预定义环境</li></ul></li><li>@babel-loader<ul><li>babel在webpack中的加载器</li></ul></li><li>core-js<ul><li>core-js用来使老版本的浏览器支持新版ES语法</li></ul></li></ul></li></ul><h3 id="2-修改webpack-config-js配置文件"><a href="#2-修改webpack-config-js配置文件" class="headerlink" title="2.修改webpack.config.js配置文件"></a>2.修改webpack.config.js配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...略...</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;targets&quot;</span>:&#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript的入门</title>
      <link href="/2023/03/25/TypeScript%E7%9A%84%E5%85%A5%E9%97%A8/"/>
      <url>/2023/03/25/TypeScript%E7%9A%84%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="0、TypeScript简介"><a href="#0、TypeScript简介" class="headerlink" title="0、TypeScript简介"></a>0、TypeScript简介</h2><ol><li><p>TypeScript是JavaScript的超集。</p></li><li><p>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</p></li><li><p>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</p></li><li><p>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</p></li><li><p>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</p></li></ol><h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol><li><p>下载Node.js</p><ul><li><p>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></p></li><li><p>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></p></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li><p>进入命令行</p></li><li><p>输入：npm i -g typescript</p></li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入ts文件所在目录</p></li><li><p>执行命令：tsc xxx.ts</p></li></ul></li></ol><h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><ul><li>let 变量: 类型;<br>​<br>let 变量: 类型 &#x3D; 值;<br>​<br>function fn(参数: 类型, 参数: 类型): 类型{<br>   …<br>}</li></ul></li></ul></li><li><p>自动类型判断</p><ul><li><p>TS拥有自动的类型判断机制</p></li><li><p>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</p></li><li><p>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</p></li></ul></li><li><p>类型：</p><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>1, -33, 2.5</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’, “hi”, <code>hi</code></td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值true或false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的any</td></tr><tr><td>void</td><td>空值（undefined）</td><td>没有值（或undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name:’孙悟空’}</td><td>任意的JS对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意JS数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A, B}</td><td>枚举，TS中新增类型</td></tr></tbody></table></li><li><p>number</p><ul><li>let decimal: number &#x3D; 6;<br>let hex: number &#x3D; 0xf00d;<br>let binary: number &#x3D; 0b1010;<br>let octal: number &#x3D; 0o744;<br>let big: bigint &#x3D; 100n;</li></ul></li><li><p>boolean</p><ul><li>let isDone: boolean &#x3D; false;</li></ul></li><li><p>string</p><ul><li>let color: string &#x3D; “blue”;<br>color &#x3D; ‘red’;<br>​<br>let fullName: string &#x3D; `Bob Bobbington`;<br>let age: number &#x3D; 37;<br>let sentence: string &#x3D; `Hello, my name is ${fullName}.<br>​<br>I’ll be ${age + 1} years old next month.`;</li></ul></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><p>let color: ‘red’ | ‘blue’ | ‘black’;<br>let num: 1 | 2 | 3 | 4 | 5;</p></li></ul></li><li><p>any</p><ul><li>let d: any &#x3D; 4;<br>d &#x3D; ‘hello’;<br>d &#x3D; true;</li></ul></li><li><p>unknown</p><ul><li>let notSure: unknown &#x3D; 4;<br>notSure &#x3D; ‘hello’;</li></ul></li><li><p>void</p><ul><li>let unusable: void &#x3D; undefined;</li></ul></li><li><p>never</p><ul><li>function error(message: string): never {<br> throw new Error(message);<br>}</li></ul></li><li><p>object（没啥用）</p><ul><li>let obj: object &#x3D; {};</li></ul></li><li><p>array</p><ul><li>let list: number[] &#x3D; [1, 2, 3];<br>let list: Array&lt;number&gt; &#x3D; [1, 2, 3];</li></ul></li><li><p>tuple</p><ul><li>let x: [string, number];<br>x &#x3D; [“hello”, 10];</li></ul></li><li><p>enum</p><ul><li>enum Color {<br> Red,<br> Green,<br> Blue,<br>}<br>let c: Color &#x3D; Color.Green;<br>​<br>enum Color {<br> Red &#x3D; 1,<br> Green,<br> Blue,<br>}<br>let c: Color &#x3D; Color.Green;<br>​<br>enum Color {<br> Red &#x3D; 1,<br> Green &#x3D; 2,<br> Blue &#x3D; 4,<br>}<br>let c: Color &#x3D; Color.Green;</li></ul></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li>let someValue: unknown &#x3D; “this is a string”;<br>let strLength: number &#x3D; (someValue as string).length;</li></ul></li><li><p>第二种</p><ul><li>let someValue: unknown &#x3D; “this is a string”;<br>let strLength: number &#x3D; (&lt;string&gt;someValue).length;</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack之处理js资源</title>
      <link href="/2023/03/18/webpack%E4%B9%8B%E5%A4%84%E7%90%86js%E8%B5%84%E6%BA%90/"/>
      <url>/2023/03/18/webpack%E4%B9%8B%E5%A4%84%E7%90%86js%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>原因是 <strong>Webpack 对 js 处理是有限的</strong>，只能<strong>编译 js 中 ES 模块化语法</strong>，不能编译其他语法。</p><ul><li><p>针对 <strong>js 兼容性</strong>处理，我们使用 <strong>Babel</strong> 来完成</p></li><li><p>针对<strong>代码格式</strong>，我们使用 <strong>Eslint</strong> 来完成</p></li></ul><p><strong>Eslint</strong></p><p>可组装的JavaScript和JSX检查工具</p><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>配置文件由很多种写法：</p><ul><li><pre><code>.eslintrc.*<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ：新建文件，位于项目根目录</span><br><span class="line"></span><br><span class="line">  - `.eslintrc`</span><br><span class="line"></span><br><span class="line">  - `.eslintrc.js`</span><br><span class="line"></span><br><span class="line">  - `.eslintrc.json`</span><br><span class="line"></span><br><span class="line">  - 区别在于配置格式不一样</span><br><span class="line"></span><br><span class="line">  - `package.json` 中 `eslintConfig`：不需要创建文件，在原有文件基础上写</span><br><span class="line"></span><br><span class="line">配置文件只需要写一个</span><br><span class="line"></span><br><span class="line">**下载安装eslint的插件**</span><br><span class="line"></span><br></pre></td></tr></table></figure>npm install eslint-webpack-plugin eslint --save-dev<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**在webpack中引入插件**</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">const ESLintPlugin = require(&#x27;eslint-webpack-plugin&#x27;);</span><br><span class="line">​</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 插件中调用eslint</span><br><span class="line">    plugins:[</span><br><span class="line">        // plugin的配置</span><br><span class="line">        new ESLintPlugin(&#123;</span><br><span class="line">            // 检查哪些文件</span><br><span class="line">            context:path.resolve(__dirname,&quot;src&quot;),</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><strong>在根目录下创建.eslintrc.js文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span> <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span> <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Babel—javaScript编译器"><a href="#Babel—javaScript编译器" class="headerlink" title="Babel—javaScript编译器"></a>Babel—javaScript编译器</h2><p>主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</p><h3 id="1-配置文件-1"><a href="#1-配置文件-1" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>配置文件由很多种写法：</p><ul><li><pre><code class="javascript">babel.config.*<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ：新建文件，位于项目根目录</span><br><span class="line"></span><br><span class="line">  - `babel.config.js`</span><br><span class="line"></span><br><span class="line">  - `babel.config.json`</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  .babelrc.*</span><br></pre></td></tr></table></figure>：新建文件，位于项目根目录- `.babelrc`- `.babelrc.js`- `.babelrc.json`</code></pre></li><li><p><code>package.json</code> 中 <code>babel</code>：不需要创建文件，在原有文件基础上写</p></li></ul><h3 id="2-具体配置"><a href="#2-具体配置" class="headerlink" title="2. 具体配置"></a>2. 具体配置</h3><p>我们以 <code>babel.config.js</code> 配置文件为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 预设</span></span><br><span class="line">  <span class="attr">presets</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>presets 预设</li></ol><p>简单理解：就是一组 Babel 插件, 扩展 Babel 功能</p><ul><li><p><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript。</p></li><li><p><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</p></li><li><p><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</p></li></ul><h3 id="3-在-Webpack-中使用"><a href="#3-在-Webpack-中使用" class="headerlink" title="3. 在 Webpack 中使用"></a>3. 在 Webpack 中使用</h3><ol><li>下载包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><p>2.定义 Babel 配置文件</p><ul><li>babel.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置</p><ul><li>webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span> <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack之处理图片和字体图标</title>
      <link href="/2023/03/04/webpack%E4%B9%8B%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%92%8C%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
      <url>/2023/03/04/webpack%E4%B9%8B%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E5%92%8C%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h1><p>过去在 Webpack4 时，我们处理图片资源通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理</p><p>现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-添加图片资源"><a href="#2-添加图片资源" class="headerlink" title="2. 添加图片资源"></a>2. 添加图片资源</h2><ul><li>src&#x2F;images&#x2F;1.jpeg</li><li>src&#x2F;images&#x2F;2.png</li><li>src&#x2F;images&#x2F;3.gif</li></ul><h2 id="3-使用图片资源"><a href="#3-使用图片资源" class="headerlink" title="3. 使用图片资源"></a>3. 使用图片资源</h2><ul><li>src&#x2F;less&#x2F;index.less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box2 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-image: url(&quot;../images/1.jpeg&quot;);</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;sass&#x2F;index.sass</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box3</span><br><span class="line">  width: 100px</span><br><span class="line">  height: 100px</span><br><span class="line">  background-image: url(&quot;../images/2.png&quot;)</span><br><span class="line">  background-size: cover</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;styl&#x2F;index.styl</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box5</span><br><span class="line">  width 100px</span><br><span class="line">  height 100px</span><br><span class="line">  background-image url(&quot;../images/3.gif&quot;)</span><br><span class="line">  background-size cover</span><br></pre></td></tr></table></figure><h2 id="4-运行指令"><a href="#4-运行指令" class="headerlink" title="4. 运行指令"></a>4. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>打开 index.html 页面查看效果</p><h2 id="5-输出资源情况"><a href="#5-输出资源情况" class="headerlink" title="5. 输出资源情况"></a>5. 输出资源情况</h2><p>此时如果查看 dist 目录的话，会发现多了三张图片资源</p><p>因为 Webpack 会将所有打包好的资源输出到 dist 目录下</p><ul><li>为什么样式资源没有呢？</li></ul><p>因为经过 <code>style-loader</code> 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来</p><h2 id="6-对图片资源进行优化"><a href="#6-对图片资源进行优化" class="headerlink" title="6. 对图片资源进行优化"></a>6. 对图片资源进行优化</h2><p>将小于某个大小的图片转化成 data URI 形式（Base64 格式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024 // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>优点：减少请求数量</li><li>缺点：体积变得更大</li></ul><p>此时输出的图片文件就只有两张，有一张图片以 data URI 形式内置到 js 中了 （注意：需要将上次打包生成的文件清空，再重新打包才有效果）</p><h1 id="修改输出资源的名称和路径"><a href="#修改输出资源的名称和路径" class="headerlink" title="修改输出资源的名称和路径"></a>修改输出资源的名称和路径</h1><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-修改-index-html"><a href="#2-修改-index-html" class="headerlink" title="**#**2. 修改 index.html"></a>**<a href="http://localhost:8080/webpack5-docs/base/output.html#_2-%E4%BF%AE%E6%94%B9-index-html" title="#">#</a>**2. 修改 index.html</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 修改 js 资源路径 --&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/static/js/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="处理字体图标资源"><a href="#处理字体图标资源" class="headerlink" title="处理字体图标资源"></a>处理字体图标资源</h1><h2 id="1-下载字体图标文件"><a href="#1-下载字体图标文件" class="headerlink" title="1. 下载字体图标文件"></a>1. 下载字体图标文件</h2><ol><li><p>打开<a href="https://www.iconfont.cn/" title="阿里巴巴矢量图标库open in new window">阿里巴巴矢量图标库open in new window</a></p></li><li><p>选择想要的图标添加到购物车，统一下载到本地</p></li></ol><h2 id="2-添加字体图标资源"><a href="#2-添加字体图标资源" class="headerlink" title="2. 添加字体图标资源"></a>2. 添加字体图标资源</h2><ul><li><p>src&#x2F;fonts&#x2F;iconfont.ttf</p></li><li><p>src&#x2F;fonts&#x2F;iconfont.woff</p></li><li><p>src&#x2F;fonts&#x2F;iconfont.woff2</p></li><li><p>src&#x2F;css&#x2F;iconfont.css</p><ul><li><p>注意字体文件路径需要修改</p></li><li><p>src&#x2F;main.js</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add &#125; from &quot;./math&quot;;</span><br><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/iconfont.css&quot;;</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line">import &quot;./less/index.less&quot;;</span><br><span class="line">import &quot;./sass/index.sass&quot;;</span><br><span class="line">import &quot;./sass/index.scss&quot;;</span><br><span class="line">import &quot;./styl/index.styl&quot;;</span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 使用字体图标 --&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-arrow-down&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-ashbin&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-browse&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/static/js/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别：</p><ol><li><code>type: &quot;asset/resource&quot;</code> 相当于<code>file-loader</code>, 将文件转化成 Webpack 能识别的资源，其他不做处理</li><li><code>type: &quot;asset&quot;</code> 相当于<code>url-loader</code>, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</li></ol>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript 前端 webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack之处理样式资源</title>
      <link href="/2023/02/25/webpack%E4%B9%8B%E5%A4%84%E7%90%86%E6%A0%B7%E5%BC%8F%E8%B5%84%E6%BA%90/"/>
      <url>/2023/02/25/webpack%E4%B9%8B%E5%A4%84%E7%90%86%E6%A0%B7%E5%BC%8F%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h1><p>本章节我们学习使用 Webpack 如何处理 Css、Less、Sass、Scss、Styl 样式资源</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="#介绍"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#%E4%BB%8B%E7%BB%8D" title="#">#</a>介绍</h2><p>Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p><p>我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用</p><h2 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a>处理 Css 资源</h2><h3 id="1-下载包"><a href="#1-下载包" class="headerlink" title="#1. 下载包"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_1-%E4%B8%8B%E8%BD%BD%E5%8C%85" title="#">#</a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure><p>注意：需要下载两个 loader</p><h3 id="2-功能介绍"><a href="#2-功能介绍" class="headerlink" title="#2. 功能介绍"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_2-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D" title="#">#</a>2. 功能介绍</h3><ul><li><code>css-loader</code>：负责将 Css 文件编译成 Webpack 能识别的模块</li><li><code>style-loader</code>：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容</li></ul><p>此时样式就会以 Style 标签的形式在页面上生效</p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="#3. 配置"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_3-%E9%85%8D%E7%BD%AE" title="#">#</a>3. 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加-Css-资源"><a href="#4-添加-Css-资源" class="headerlink" title="4. 添加 Css 资源"></a>4. 添加 Css 资源</h3><ul><li>src&#x2F;css&#x2F;index.css</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入 Css 资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 引入打包后的js文件，才能看到效果 --&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令"><a href="#5-运行指令" class="headerlink" title="5. 运行指令"></a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>打开 index.html 页面查看效果</p><h2 id="处理-Less-资源"><a href="#处理-Less-资源" class="headerlink" title="#处理 Less 资源"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#%E5%A4%84%E7%90%86-less-%E8%B5%84%E6%BA%90" title="#">#</a>处理 Less 资源</h2><h3 id="1-下载包-1"><a href="#1-下载包-1" class="headerlink" title="#1. 下载包"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_1-%E4%B8%8B%E8%BD%BD%E5%8C%85-1" title="#">#</a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader -D</span><br></pre></td></tr></table></figure><h3 id="2-功能介绍-1"><a href="#2-功能介绍-1" class="headerlink" title="#2. 功能介绍"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_2-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D-1" title="#">#</a>2. 功能介绍</h3><ul><li><code>less-loader</code>：负责将 Less 文件编译成 Css 文件</li></ul><h3 id="3-配置-1"><a href="#3-配置-1" class="headerlink" title="#3. 配置"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_3-%E9%85%8D%E7%BD%AE-1" title="#">#</a>3. 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加-Less-资源"><a href="#4-添加-Less-资源" class="headerlink" title="#4. 添加 Less 资源"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_4-%E6%B7%BB%E5%8A%A0-less-%E8%B5%84%E6%BA%90" title="#">#</a>4. 添加 Less 资源</h3><ul><li>src&#x2F;less&#x2F;index.less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box2 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line">import &quot;./less/index.less&quot;;</span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令-1"><a href="#5-运行指令-1" class="headerlink" title="#5. 运行指令"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_5-%E8%BF%90%E8%A1%8C%E6%8C%87%E4%BB%A4-1" title="#">#</a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>打开 index.html 页面查看效果</p><h2 id="处理-Sass-和-Scss"><a href="#处理-Sass-和-Scss" class="headerlink" title="#处理 Sass 和 Scss"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#%E5%A4%84%E7%90%86-sass-%E5%92%8C-scss-%E8%B5%84%E6%BA%90" title="#">#</a>处理 Sass 和 Scss</h2><h2 id="处理-Sass-和-Scss-资源"><a href="#处理-Sass-和-Scss-资源" class="headerlink" title="处理 Sass 和 Scss 资源"></a>处理 Sass 和 Scss 资源</h2><h3 id="1-下载包-2"><a href="#1-下载包-2" class="headerlink" title="#1. 下载包"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_1-%E4%B8%8B%E8%BD%BD%E5%8C%85-2" title="#">#</a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass-loader sass -D</span><br></pre></td></tr></table></figure><p>注意：需要下载两个</p><h3 id="2-功能介绍-2"><a href="#2-功能介绍-2" class="headerlink" title="#2. 功能介绍"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_2-%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D-2" title="#">#</a>2. 功能介绍</h3><ul><li><code>sass-loader</code>：负责将 Sass 文件编译成 css 文件</li><li><code>sass</code>：<code>sass-loader</code> 依赖 <code>sass</code> 进行编译</li></ul><h3 id="3-配置-2"><a href="#3-配置-2" class="headerlink" title="#3. 配置"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_3-%E9%85%8D%E7%BD%AE-2" title="#">#</a>3. 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加-Sass-资源"><a href="#4-添加-Sass-资源" class="headerlink" title="#4. 添加 Sass 资源"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_4-%E6%B7%BB%E5%8A%A0-sass-%E8%B5%84%E6%BA%90" title="#">#</a>4. 添加 Sass 资源</h3><ul><li>src&#x2F;sass&#x2F;index.sass</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 可以省略大括号和分号 */</span><br><span class="line">.box3</span><br><span class="line">  width: 100px</span><br><span class="line">  height: 100px</span><br><span class="line">  background-color: hotpink</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;sass&#x2F;index.scss</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box4 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: lightpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line">import &quot;./less/index.less&quot;;</span><br><span class="line">import &quot;./sass/index.sass&quot;;</span><br><span class="line">import &quot;./sass/index.scss&quot;;</span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令-2"><a href="#5-运行指令-2" class="headerlink" title="#5. 运行指令"></a><a href="http://localhost:8080/webpack5-docs/base/css.html#_5-%E8%BF%90%E8%A1%8C%E6%8C%87%E4%BB%A4-2" title="#">#</a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>打开 index.html 页面查看效果</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack 前端 javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于webpack的基本使用</title>
      <link href="/2023/02/19/%E5%85%B3%E4%BA%8Ewebpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/19/%E5%85%B3%E4%BA%8Ewebpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>webpack是一个静态资源打包工具</p><p>我们将webpack输出的文件叫做bundle</p><p>开发模式：仅能编译JS中的ES Module语法</p><p>生产模式：能编译JS中的ES Module 语法，还可以压缩js代码</p><p>先设置入口文件main.js</p><p><strong>初始化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><strong>下载依赖的webpack包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p><strong>调用webpack包里面的打包工具 --开发环境</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack ./src/main.<span class="property">js</span> --mode=development</span><br></pre></td></tr></table></figure><p>小结： webpack本身功能比较少，只能处理js资源，一旦遇到css等其他资源就会报错</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>1.entry（入口）</p><p>指示webpack从哪个文件开始打包</p><p>2.output（输出）</p><p>指示webpack打包完的文件输出到那里去，如何命名等</p><p>3.loader（加载器）</p><p>webpack本身只能处理js，json等资源，其他资源需要借助loader，webpack才能解析</p><p>4.plugins（插件）</p><p>扩展webpack的功能</p><p>5.mode（模式）</p><p>主要两种模式：</p><p>开发模式：development</p><p>生产模式：production</p><p><strong>先在目录下面创建一个文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack.<span class="property">config</span>.<span class="property">js</span></span><br></pre></td></tr></table></figure><p><strong>在webpack里面配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>) <span class="comment">// nodejs核心模块，专门用来处理路径的问题</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>, <span class="comment">// 相对路径</span></span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 文件的输出路径</span></span><br><span class="line">    <span class="comment">// __dirname nodejs 的变量，代表当前文件的文件夹目录</span></span><br><span class="line">    <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 绝对路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// plugin的配置</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发模式介绍"><a href="#开发模式介绍" class="headerlink" title="开发模式介绍"></a>开发模式介绍</h3><p>是我们开发代码的时候的模式</p><p>主要做两件事：</p><p>1，编译代码，是浏览器能识别通过</p><p>2.代码质量检查，树立代码的规范</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack javascript 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误日志1</title>
      <link href="/2023/02/13/hello-world/"/>
      <url>/2023/02/13/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误日志1</title>
      <link href="/2023/02/13/hello/"/>
      <url>/2023/02/13/hello/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的token存储和使用</title>
      <link href="/2023/02/04/vue%E4%B8%AD%E7%9A%84token%E5%AD%98%E5%82%A8%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/04/vue%E4%B8%AD%E7%9A%84token%E5%AD%98%E5%82%A8%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="token存储"><a href="#token存储" class="headerlink" title="token存储"></a>token存储</h3><p>通过ajax请求路由地址，并保存到store里面，通过getters进行存储token，并存储在浏览器中，步骤和写法是固定的</p><p><img src="https://img-blog.csdnimg.cn/f2f301df606f4daabaf1ecc99e37510c.png"></p><p><img src="https://img-blog.csdnimg.cn/084cfa7cbd06407c81827bde5c71379a.png"></p><h3 id="前端使用token实现路由守卫"><a href="#前端使用token实现路由守卫" class="headerlink" title="前端使用token实现路由守卫"></a>前端使用token实现路由守卫</h3><p>其实在后端代码中写的unless就是路由守卫的意思，不过前端应该也要有这个，不然不用登录就可以访问到网站的内容了，这显然不合理</p><p>看看前端怎么写的，写在router.js中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.path == <span class="string">&#x27;/login&#x27;</span> || to.path== <span class="string">&#x27;/register&#x27;</span>|| to.path == <span class="string">&#x27;/forget&#x27;</span>)&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// let stores = store;</span></span><br><span class="line">        let token = JSON.parse(localStorage.store).token;</span><br><span class="line">        <span class="comment">// console.log(store);</span></span><br><span class="line">        <span class="comment">// console.log(JSON.parse(localStorage.store).token);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(token == <span class="literal">null</span> || token == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">            next(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>看路由守卫后面的代码就可以了</p><p>使用的是router中的beforeEach函数</p><p>使用的逻辑如下：</p><p>定义一个token，获取localstorage里面的token值<br>确定哪些路由不需要拦截：to.path &#x3D;&#x3D; ‘&#x2F;login’ || to.path &#x3D;&#x3D; ‘&#x2F;register || to.path&#x3D;&#x3D;’&#x2F;forget’’也就是登录和注册不需要拦截，直接放行，用next()<br>对于拦截的路由，判断token是否为null,或者是空，是就说明没有登录，就不放行，有token，直接放行，</p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 javascript 前端 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这一周的学习</title>
      <link href="/2023/01/15/%E8%BF%99%E4%B8%80%E5%91%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/15/%E8%BF%99%E4%B8%80%E5%91%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>主要是进行项目的写作，也有对算法的练习，还有一些自己的学习计划。</p><p>分享自己在写项目中的问题，vue中刷新页面</p><h2 id="方式1-通过location-reload和-router-go-0-方法"><a href="#方式1-通过location-reload和-router-go-0-方法" class="headerlink" title="方式1-通过location.reload和$router.go(0)方法"></a>方式1-通过location.reload和$router.go(0)方法</h2><h3 id="a-概述"><a href="#a-概述" class="headerlink" title="(a)概述"></a>(a)概述</h3><p>通过<code>location.reload</code>和<code>$router.go(0)</code>都可以实现页面刷新,它利用浏览器刷新功能,相当于按下了<code>f5</code>键刷新页面<br><strong>优点</strong>:足够简单<br>(b)代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue-router/3.5.3/vue-router.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">* &#123;padding:0;margin:0;&#125;</span><br><span class="line">.container &#123; padding: 10px;display: flex;flex-basis: auto;height: 100vh;box-sizing: border-box;&#125;</span><br><span class="line">.aside&#123; width:200px;background-color: #d3dce6; &#125;</span><br><span class="line">.main &#123; flex: 1; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//框架页</span><br><span class="line">let Layout = &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#x27;框架页加载&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;aside&quot;&gt;左侧菜单&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line">//首页</span><br><span class="line">let Home = &#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            首页</span><br><span class="line">            &lt;button @click=&quot;onClick&quot;&gt;刷新&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#x27;首页加载&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onClick()&#123;</span><br><span class="line">            // 通localtion.reload或者this.$router.go(0)实现整体刷新页面,会出现页面闪烁</span><br><span class="line">            // location.reload()</span><br><span class="line">            this.$router.go(0)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">//路由配置</span><br><span class="line">let router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;path: &#x27;/&#x27;, component: Layout, children:[</span><br><span class="line">            &#123;path: &#x27;&#x27;, component: Home&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">//根组件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    el: &#x27;#app&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="方式2-通过空白页面"><a href="#方式2-通过空白页面" class="headerlink" title="方式2-通过空白页面"></a>方式2-通过空白页面</h2><h3 id="a-概述-1"><a href="#a-概述-1" class="headerlink" title="(a)概述"></a>(a)概述</h3><p>通过<code>$router.replace</code>方法,跳转一个空白页面,然后再调回之前页面,它利用<code>vue-router</code>切换页面会把页面销毁并新建新页面的特性<br><strong>优点</strong>:不会出现页面空白,用户体验好</p><h3 id="b-代码"><a href="#b-代码" class="headerlink" title="(b)代码"></a>(b)代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue-router/3.5.3/vue-router.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">* &#123;padding:0;margin:0;&#125;</span><br><span class="line">.container &#123; padding: 10px;display: flex;flex-basis: auto;height: 100vh;box-sizing: border-box;&#125;</span><br><span class="line">.aside&#123; width:200px;background-color: #d3dce6; &#125;</span><br><span class="line">.main &#123; flex: 1; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//框架页</span><br><span class="line">let Layout = &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#x27;框架页加载&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;aside&quot;&gt;左侧菜单&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line">//首页</span><br><span class="line">let Home = &#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            首页</span><br><span class="line">            &lt;button @click=&quot;onClick&quot;&gt;刷新&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#x27;首页加载&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onClick()&#123;</span><br><span class="line">            //使用replace跳转后不会留下 history 记录,并通过redirect传递当前页面的路径</span><br><span class="line">            this.$router.replace(`/blank?redirect=$&#123;this.$route.fullPath&#125;`)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">//空白页面</span><br><span class="line">let Blank = &#123;</span><br><span class="line">    created()&#123;</span><br><span class="line">        console.log(&#x27;空白页加载&#x27;)</span><br><span class="line">        //重新跳回之前的页面</span><br><span class="line">        this.$router.replace(this.$route.query.redirect)</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br><span class="line">//路由配置</span><br><span class="line">let router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;path: &#x27;/&#x27;, component: Layout, children:[</span><br><span class="line">            &#123;path: &#x27;&#x27;, component: Home&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        //配置空白页面的路由</span><br><span class="line">        &#123;path: &#x27;/blank&#x27;, component: Layout, children:[</span><br><span class="line">            &#123;path: &#x27;&#x27;, component: Blank&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">//根组件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    el: &#x27;#app&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="方式3-通过provide和inject"><a href="#方式3-通过provide和inject" class="headerlink" title="方式3-通过provide和inject"></a>方式3-通过provide和inject</h2><h3 id="a-概述-2"><a href="#a-概述-2" class="headerlink" title="(a)概述"></a>(a)概述</h3><p>通过在父页面的<code>&lt;router-view&gt;&lt;/router-view&gt;</code>上添加<code>v-if的控制</code>来销毁和重新创建页面的方式刷新页面,并且用到<code>provide</code>和<code>inject</code>实现多层级组件通信方式,父页面通过<code>provide</code>提供<code>reload</code>方法,子页面通过<code>inject</code>获取<code>reload</code>方法,调用方法做刷新<br><strong>优点</strong>:不会出现页面空白,地址栏会不会出现快速切换的过程,用户体验好</p><h3 id="b-代码-1"><a href="#b-代码-1" class="headerlink" title="(b)代码"></a>(b)代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue-router/3.5.3/vue-router.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">* &#123;padding:0;margin:0;&#125;</span><br><span class="line">.container &#123; padding: 10px;display: flex;flex-basis: auto;height: 100vh;box-sizing: border-box;&#125;</span><br><span class="line">.aside&#123; width:200px;background-color: #d3dce6; &#125;</span><br><span class="line">.main &#123; flex: 1; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//框架页</span><br><span class="line">let Layout = &#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;aside&quot;&gt;左侧菜单&lt;/div&gt;</span><br><span class="line">            &lt;!-- 通过v-if实现销毁和重新创建组件 --&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;&lt;router-view v-if=&quot;isRouterAlive&quot;&gt;&lt;/router-view&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#x27;框架页加载&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 通过provide提供reload方法给后代组件</span><br><span class="line">    provide()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            reload: this.reload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isRouterAlive: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async reload()&#123;</span><br><span class="line">            this.isRouterAlive = false</span><br><span class="line">            //通过this.$nextTick()产生一个微任务,在一次dom事件循环后,重新创建组件</span><br><span class="line">            await this.$nextTick()</span><br><span class="line">            this.isRouterAlive = true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//首页</span><br><span class="line">let Home = &#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            首页</span><br><span class="line">            &lt;button @click=&quot;onClick&quot;&gt;刷新&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#x27;首页加载&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //通过inject获取祖先元素的reload方法</span><br><span class="line">    inject: [&#x27;reload&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onClick()&#123;</span><br><span class="line">            this.reload()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">//路由配置</span><br><span class="line">let router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;path: &#x27;/&#x27;, component: Layout, children:[</span><br><span class="line">            &#123;path: &#x27;&#x27;, component: Home&#125;</span><br><span class="line">        ]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">//根组件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    el: &#x27;#app&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的请求接口的两种方法</title>
      <link href="/2022/12/10/vue%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2022/12/10/vue%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>vue 项目安装axios:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install axios --save</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>    哪个文件需要用到就在哪个文件中引入</span><br></pre></td></tr></table></figure><p>安装qs：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save axios vue-axios qs</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>  qs 用来解决vue中post请求以 a=a&amp;b=b 的格式</span><br></pre></td></tr></table></figure><p>main.js内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>  （两句很重要）</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>     （两句很重要）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span>=axios  （两句很重要）</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$qs</span>=qs    （两句很重要）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要的页面请求接口时 get 和post 两种方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">loadData</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//get 请求接口</span></span><br><span class="line">            <span class="keyword">var</span> _this=<span class="variable language_">this</span>;</span><br><span class="line">            _this.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">`../static/tsconfig.json`</span>)</span><br><span class="line">              .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data=res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">description</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">loadPost</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//post请求接口</span></span><br><span class="line">            <span class="keyword">var</span> _this=<span class="variable language_">this</span>;</span><br><span class="line">            _this.<span class="property">$axios</span>.<span class="title function_">post</span>(</span><br><span class="line">              <span class="string">`../static/tsconfig.json`</span>,</span><br><span class="line">              _this.<span class="property">$qs</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                <span class="attr">sname</span>:<span class="string">&#x27;hahaha&#x27;</span></span><br><span class="line">              &#125;)</span><br><span class="line">            )</span><br><span class="line">              .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data=res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">description</span>)</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js javascript 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端文件下载</title>
      <link href="/2022/12/03/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/12/03/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="1、实现方法"><a href="#1、实现方法" class="headerlink" title="1、实现方法"></a>1、实现方法</h3><p>        1）<code>form</code>表单提交</p><p>为一个下载按钮添加click事件，点击时动态生成一个表单，利用表单提交的功能来实现文件的下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">path</span> - 请求的地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">fileName</span> - 文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">downloadFile</span> (downloadUrl, fileName) &#123;</span><br><span class="line">    <span class="comment">// 创建表单</span></span><br><span class="line">    <span class="keyword">const</span> formObj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line">    formObj.<span class="property">action</span> = downloadUrl;</span><br><span class="line">    formObj.<span class="property">method</span> = <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line">    formObj.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    <span class="comment">// 创建input，主要是起传参作用</span></span><br><span class="line">    <span class="keyword">const</span> formItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    formItem.<span class="property">value</span> = fileName; <span class="comment">// 传参的值</span></span><br><span class="line">    formItem.<span class="property">name</span> = <span class="string">&#x27;fileName&#x27;</span>; <span class="comment">// 传参的字段名</span></span><br><span class="line">    <span class="comment">// 插入到网页中</span></span><br><span class="line">    formObj.<span class="title function_">appendChild</span>(formItem);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(formObj);</span><br><span class="line">    formObj.<span class="title function_">submit</span>(); <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(formObj); <span class="comment">// 发送完清除掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>        2）<code>a</code>标签的<code>download</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;example.jpg&quot;</span> download&gt;点击下载&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">download</span>=<span class="string">&quot;test&quot;</span>&gt;</span>点击下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> <span class="comment">// 指定文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测浏览器是否支持download属性</span></span><br><span class="line"><span class="keyword">const</span> isSupport = <span class="string">&#x27;download&#x27;</span> <span class="keyword">in</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>        3）<code>open</code>或<code>location.href</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;downloadFile.zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;downloadFile.zip&#x27;</span>;</span><br></pre></td></tr></table></figure><p>        4）Blob对象</p><p>调用api，将文件流转为Blob二进制对象，</p><p><strong>思路：</strong> 发请求获取二进制数据，转化为Blob对象，利用<code>URL.createObjectUrl</code>生成url地址，赋值在<code>a</code>标签的<code>href</code>属性上，结合<code>download</code>进行下载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">path</span> - 下载地址/下载请求地址。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">name</span> - 下载文件的名字/重命名（考虑到兼容性问题，最好加上后缀名）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">downloadFile (path, name) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, path);</span><br><span class="line">    xhr.<span class="property">responseType</span> = <span class="string">&#x27;blob&#x27;</span>;</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span> || <span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是IE10及以上，不支持download属性，采用msSaveOrOpenBlob方法，但是IE10以下也不支持msSaveOrOpenBlob</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;msSaveOrOpenBlob&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">                navigator.<span class="title function_">msSaveOrOpenBlob</span>(<span class="variable language_">this</span>.<span class="property">response</span>, name);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">              如果发送请求时不设置xhr.responseType = &#x27;blob&#x27;，</span></span><br><span class="line"><span class="comment">              默认ajax请求会返回DOMString类型的数据，即字符串。</span></span><br><span class="line"><span class="comment">              此时需要使用两处注释的代码，对返回的文本转化为Blob对象，然后创建blob url，</span></span><br><span class="line"><span class="comment">              此时需要注释掉原本的const url = URL.createObjectURL(target.response)。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">            const blob = new Blob([this.response], &#123; type: xhr.getResponseHeader(&#x27;Content-Type&#x27;) &#125;);</span></span><br><span class="line"><span class="comment">            const url = URL.createObjectURL(blob);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(<span class="variable language_">this</span>.<span class="property">response</span>); <span class="comment">// 使用上面则注释此行</span></span><br><span class="line">            <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            a.<span class="property">href</span> = url;</span><br><span class="line">            a.<span class="property">download</span> = name;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">            a.<span class="title function_">click</span>();</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line">            <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面方法本地测试有时会有跨域问题，下面使用axios重写一下</span></span><br><span class="line"><span class="comment">// 已经配置好proxy</span></span><br><span class="line">downloadFile (path, name) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: path,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123; <span class="attr">type</span>: res.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>] &#125;);</span><br><span class="line">      <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">      <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">      a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">      a.<span class="property">href</span> = url;</span><br><span class="line">      a.<span class="property">download</span> = name;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">      a.<span class="title function_">click</span>();</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line">      <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法不能缺少<code>a</code>标签的<code>download</code>属性的设置。</p><p>因为发请求时已设置返回数据类型为<code>Blob</code>类型<code>(xhr.responseType = &#39;blob&#39;)</code>，所以<code>target.response</code>就是一个<code>Blob</code>对象，打印出来会看到两个属性<code>size</code>和<code>type</code>。虽然<code>type</code>属性已指定了文件的类型，但是为了稳妥起见，还是在<code>download</code>属性值里指定后缀名，如<code>Firefox</code>不指定下载下来的文件就会不识别类型。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 javascript 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回看路由守卫</title>
      <link href="/2022/11/26/%E5%9B%9E%E7%9C%8B%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/"/>
      <url>/2022/11/26/%E5%9B%9E%E7%9C%8B%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><ol><li>全局路由守卫</li></ol><ul><li><p>前置路由守卫: <code>beforeEach</code> 路由切换之前被调用</p><ul><li>全局解析守卫:<code>beforeResolve</code> 在每次导航时就会触发,但是确保在导航被确认之前,同时在所有组件内守卫和异步路由组件被解析之后 2,解析守卫就被正确调用,如确保用户可以访问自定义 meta 属性<code>requiresCamera</code>  的路由：</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="keyword">async</span> (to) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">askForCameraPermission</span>()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>router.beforeResolve</code>  是获取数据或执行任何其他操作（<strong>如果用户无法进入页面时你希望避免执行的操作</strong>）的理想位置。</p><ul><li>后置路由守卫 :<code>afterEach</code> 路由切换之后被调用<code>requiresCamera</code>  的路由：</li></ul><p>2.独享路由守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/foo&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.组件內路由守卫 可以在组件内使用者两个钩子</p><ul><li>通过路由规则,进入该组件时被调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过路由规则,离开该组件时调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整的导航解析过程"><a href="#完整的导航解析过程" class="headerlink" title="完整的导航解析过程"></a>完整的导航解析过程</h2><ol><li>导航被触发。</li><li>在失活的组件里调用  <code>beforeRouteLeave</code>  守卫。</li><li>调用全局的  <code>beforeEach</code>  守卫。</li><li>在重用的组件里调用  <code>beforeRouteUpdate</code>  守卫(2.2+)。</li><li>在路由配置里调用  <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用  <code>beforeRouteEnter</code>。</li><li>调用全局的  <code>beforeResolve</code>  守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的  <code>afterEach</code>  钩子。</li><li>触发 DOM 更新。</li><li>调用  <code>beforeRouteEnter</code>  守卫中传给  <code>next</code>  的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><ol><li><p>history 模式 <code>/</code>: 使用<code>pushState</code>和<code>replaceState</code>,通过这两个 API 可以改变 url 地址不发生请求,<code>popState</code>事件</p></li><li><p>hash 模式<code>#</code> :</p><p>hash 是 URL 中 hash(#)及后面的那部分,常用作锚点在页面内进行导航,改变 hash 值不会随着 http 请求发送给服务器,通过<code>hashChange</code>事件监听 URL 的变化,可以用他来实现更新页面部分内容的操作</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 javascript 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.config.js 的配置</title>
      <link href="/2022/11/19/vue.config.js%20%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/11/19/vue.config.js%20%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1 基本配置"></a><strong>1 基本配置</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8090</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 其他配置</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li><p><strong>productionSourceMap</strong>：生产环境是否要生成 <code>sourceMap</code></p></li><li><p><strong>publicPath</strong>：部署应用包时的基本 URL,用法和 <code>webpack</code> 本身的 <code>output.publicPath</code> 一致</p><ul><li>可以通过三元运算去配置<code>dev</code>和<code>prod</code>环境, <code>publicPath: process.env.NODE_ENV === &#39;production&#39; ? &#39;/prod/&#39; : &#39;./&#39;</code></li></ul></li><li><p><strong>outputDir</strong>: <code>build</code> 时输出的文件目录</p></li><li><p><strong>assetsDir</strong>: 放置静态文件夹目录</p></li><li><p><strong>devServer</strong>: dev环境下，<code>webpack-dev-server</code> 相关配置</p><ul><li><strong>port</strong>: 开发运行时的端口</li><li><strong>host</strong>: 开发运行时域名，设置成<code>&#39;0.0.0.0&#39;</code>,在同一个局域网下，如果你的项目在运行，同时可以通过你的<code>http://ip:port/...访问你的项目</code></li><li><strong>https</strong>: 是否启用 <code>https</code></li><li><strong>open</strong>: <code>npm run serve</code> 时是否直接打开浏览器</li></ul></li></ul><h3 id="2-插件及规则的配置"><a href="#2-插件及规则的配置" class="headerlink" title="2 插件及规则的配置"></a><strong>2 插件及规则的配置</strong></h3><p>在<code>vue.config.js</code>如果要<code>新增/修改</code> <code>webpack</code> 的 <code>plugins</code> 或者 <code>rules</code> , 有2种方式。</p><p><code>configureWebpack</code> 方式</p><p>configureWebpack 是相对比较简单的一种方式</p><ul><li>它可以是一个<code>对象</code>：和 <code>webpack</code> 本身配置方式是一致，该对象将会被 <code>webpack-merge</code> 合并入最终的 <code>webpack</code> 配置</li><li>它也可以是一个<code>函数</code>：直接在函数内部进行修改配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>:[],</span><br><span class="line">    <span class="attr">plugins</span>: []</span><br><span class="line">  &#125;</span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 例如，通过判断运行环境，设置mode</span></span><br><span class="line">    config.<span class="property">mode</span> = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>chainWebpack</code> 方式</p><p>chainWebpack 链式操作 (高级)，接下来所有的配置我都会在该选项中进行配置</p><p>案例：<code>style-resources-loader</code> 来添加<code>less</code>全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 style-resources-loader 来添加less全局变量</span></span><br><span class="line">        <span class="keyword">const</span> types = [<span class="string">&#x27;vue-modules&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;normal-modules&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>];</span><br><span class="line">        types.<span class="title function_">forEach</span>(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> rule = config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;less&#x27;</span>).<span class="title function_">oneOf</span>(type)</span><br><span class="line">            rule.<span class="title function_">use</span>(<span class="string">&#x27;style-resource&#x27;</span>)</span><br><span class="line">                .<span class="title function_">loader</span>(<span class="string">&#x27;style-resources-loader&#x27;</span>)</span><br><span class="line">                .<span class="title function_">options</span>(&#123;</span><br><span class="line">                    <span class="attr">patterns</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./lessVariates.less&#x27;</span>)]</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js javascript 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>diff算法</title>
      <link href="/2022/11/12/diff%E7%AE%97%E6%B3%95/"/>
      <url>/2022/11/12/diff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>一、什么是diff算法<br>diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记<br>录的消息去局部更新Dom。</p><p>简单来说：<br>diff的过程就是调用名为patch的函数，比较新旧节点，一边比较一边给真实的DOM打补丁</p><p>二、diff算法的特点<br>比较只会在同层级进行, 不会跨层级比较<br>在diff比较的过程中，循环从两边向中间比较<br>diff 算法的在很多场景下都有应用，在 vue 中，作用于虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较</p><p>三、diff算法的步骤<br>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文 档当中</p><p>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较(diff)，记录两棵树差异</p><p>把第二棵树所记录的差异应用到第一棵树所构建的真正的DOM树上(patch)，视图就更新了<br>四、 比较方式</p><p>diff整体策略为：深度优先，同层比较</p><p>比较只会在同层级进行, 不会跨层级比较<br>比较的过程中，循环从两边向中间收拢<br>五、原理分析<br>当数据发生改变时，set方法会调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图</p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 底层 javascript 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件间通信</title>
      <link href="/2022/11/06/%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/11/06/%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>前言<br>组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互进行直接的引用，所以组件间的相互通信是非常重要的。</p><p>除了使用vuex外还有下面6种组件间的通信方式：<br>1、 props &#x2F; $emit<br>父组件通过 props 向子组件传递数据，子组件通过 $emit 和父组件通信</p><p>（1）父组件向子组件传值（props的用法）<br>props的特点：</p><p>props只能是父组件向子组件进行传值，props使得父子组件之间形成一个单向的下行绑定。子组件的数据会随着父组件的更新而响应式更新。<br>props可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以是传递一个函数。</p><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;father&quot;&gt;</span><br><span class="line">        &lt;son :msg=&quot;msgData&quot; :fn=&quot;myFunction&quot;&gt;&lt;/son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import son from &quot;./son.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: father,</span><br><span class="line">    data() &#123;</span><br><span class="line">        msgData: &quot;父组件数据&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        myFunction() &#123;</span><br><span class="line">            console.log(&quot;vue&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        son</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;son&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;fn&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;son&quot;,</span><br><span class="line">    props: [&quot;msg&quot;, &quot;fn&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>（2）子组件向父组件传递数据（$emit的用法）<br>$emit的特点：</p><p>$emit 绑定一个自定义事件，当这个事件被执行的时候就会将参数传递给父组件，而父组件通过v-on监听并接收参数</p><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">    &lt;com-article :articles=&quot;articleList&quot; @onEmitIndex=&quot;onEmitIndex&quot;&gt;&lt;/com-article&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;currentIndex&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import comArticle from &#x27;./test/article.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;comArticle&#x27;,</span><br><span class="line">  components: &#123; comArticle &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentIndex: -1,</span><br><span class="line">      articleList: [&#x27;红楼梦&#x27;, &#x27;西游记&#x27;, &#x27;三国演义&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onEmitIndex(idx) &#123;</span><br><span class="line">      this.currentIndex = idx</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item, index) in articles&quot; :key=&quot;index&quot; @click=&quot;emitIndex(index)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;articles&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    emitIndex(index) &#123;</span><br><span class="line">      this.$emit(&#x27;onEmitIndex&#x27;, index) // 触发父组件的方法，并传递参数index</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、ref &#x2F; $refs<br>这种方式也是实现父子组件之间的通信</p><p>ref：这个属性用在子组件上，它的用用就指向了子组件的实例，可以通过实例来访问组件的数据和方法</p><p>用法：</p><p>在子组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#x27;JavaScript&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHello () &#123;</span><br><span class="line">      console.log(&#x27;hello&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在父组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child ref=&quot;child&quot;&gt;&lt;/component-a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from &#x27;./child.vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123; child &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      console.log(this.$refs.child.name);  // JavaScript</span><br><span class="line">      this.$refs.child.sayHello();  // hello</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3、eventBus事件总线（$emit &#x2F; $on）<br>eventBus事件总线适用于父子组件、非父子组件等之间的通信，使用步骤如下：（1）创建事件中心管理组件之间的通信</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// event-bus.js</span><br><span class="line"></span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">export const EventBus = new Vue()</span><br></pre></td></tr></table></figure><p>（2）发送事件 假设有两个兄弟组件firstCom和secondCom：<br>firstCom和secondCom的父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;first-com&gt;&lt;/first-com&gt;</span><br><span class="line">    &lt;second-com&gt;&lt;/second-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import firstCom from &#x27;./firstCom.vue&#x27;</span><br><span class="line">import secondCom from &#x27;./secondCom.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; firstCom, secondCom &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在firstCom组件中发送事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;加法&lt;/button&gt;    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;EventBus&#125; from &#x27;./event-bus.js&#x27; // 引入事件中心</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      num:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    add()&#123;</span><br><span class="line">      EventBus.$emit(&#x27;addition&#x27;, &#123;</span><br><span class="line">        num:this.num++</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>（3）接收事件<br>在secondCom组件中接收事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;求和: &#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; EventBus &#125; from &#x27;./event-bus.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    EventBus.$on(&#x27;addition&#x27;, param =&gt; &#123;</span><br><span class="line">      this.count = this.count + param.num;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上述代码中，这就相当于将num值存贮在了事件总线中，在其他组件中可以直接访问。事件总线就相当于一个桥梁，不用组件通过它来通信。虽然看起来比较简单，但是这种方法也有不变之处，如果项目过大，使用这种方式进行通信，后期维护起来会很困难。</p><p>4、依赖注入（provide &#x2F; inject）<br>这种方式就是vue中依赖注入，该方法用于 父子组件之间 的通信。当然这里所说的父子不一定是真正的父子，也可以是祖孙组件，在层数很深的情况下，可以使用这种方式来进行传值。就不用一层一层的传递数据了。</p><p>provide和inject是vue提供的两个钩子，和data、methods是同级的。并且provide的书写形式和data一样。</p><p>provide 钩子用来发送数据或方法。<br>inject钩子用来接收数据或方法<br>用法：<br>父组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provide() &#123; </span><br><span class="line">    return &#123;     </span><br><span class="line">        num: this.num  </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件中：</p><p>inject: [‘num’]<br>1<br>还有另一种写法，这种写法可以访问父组件中的所有属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">provide() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">    app: this</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">    num: 1</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inject: [&#x27;app&#x27;]</span><br><span class="line">console.log(this.app.num)</span><br></pre></td></tr></table></figure><p>注意： 依赖注入所提供的属性是非响应式的。</p><p>5、$parent &#x2F; $children<br>使用$parent可以让组件访问父组件的实例（访问的是上一级父组件的属性和方法）。<br>使用 $children 可以让组件访问子组件的实例，但是， $children 并不能保证顺序，并且访问的数据也不是响应式的。<br>用法：<br>子组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;获取父组件的值为:  &#123;&#123;parentVal&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Vue&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    parentVal()&#123;</span><br><span class="line">      return this.$parent.msg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello_world&quot;&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;child&gt;&lt;/child&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;点击改变子组件值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &#x27;./child.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; child &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;Welcome&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    change() &#123;</span><br><span class="line">      // 获取到子组件</span><br><span class="line">      this.$children[0].message = &#x27;JavaScript&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，子组件获取到了父组件的parentVal值，父组件改变了子组件中message的值。</p><p>注意：</p><p>通过 $parent 访问到的是上一级父组件的实例，可以使用 $root 来访问根组件的实例<br>在组件中使用$children拿到的是所有的子组件的实例，它是一个数组，并且是无序的<br>在根组件 #app 上拿 $parent 得到的是 new Vue()的实例，在这实例上再拿 $parent 得到的是undefined，而在最底层的子组件拿 $children 是个空数组<br>$children 的值是数组，而 $parent是个对象<br>6、$attrs &#x2F; $listeners<br>考虑一种场景，如果A是B组件的父组件，B是C组件的父组件。如果想要组件A给C组件传递数据，这种隔代传数据的情况该使用哪种方式呢？</p><p>如果是用props&#x2F; $emit 来一级一级的传递，确实可以完成，但是比较复杂；如果使用事件总线，在多人开发或者项目较大的时候，维护起来很麻烦；如果使用vuex，如果仅仅是传递数据，那可能有点浪费了。</p><p>针对上述情况，vue引入了 $attrs &#x2F; $listeners，实组件之间的跨代通信。</p><p>$attrs：继承所有的父组件属性（除了props传递的属性、class 和 style），一般用在子组件的子元素上<br>$listeners：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 v-on&#x3D;” $listeners “ 将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）<br>再说一下 inheritAttrs</p><p>默认值为true，继承所有的父组件属性除props之外的所有属性。<br>只继承class属性。<br>$attrs &#x2F; $listeners的用法：<br>A组件（APP.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        //此处监听了两个事件，可以在B组件或者C组件中直接触发 </span><br><span class="line">        &lt;child1 :p-child1=&quot;child1&quot; :p-child2=&quot;child2&quot; @test1=&quot;onTest1&quot; @test2=&quot;onTest2&quot;&gt;&lt;/child1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child1 from &#x27;./Child1.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123; Child1 &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onTest1() &#123;</span><br><span class="line">            console.log(&#x27;test1 running&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onTest2() &#123;</span><br><span class="line">            console.log(&#x27;test2 running&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>B组件（Child1.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;child-1&quot;&gt;</span><br><span class="line">        &lt;p&gt;props: &#123;&#123;pChild1&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;$attrs: &#123;&#123;$attrs&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;child2 v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/child2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child2 from &#x27;./Child2.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;pChild1&#x27;],</span><br><span class="line">    components: &#123; Child2 &#125;,</span><br><span class="line">    inheritAttrs: false,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$emit(&#x27;test1&#x27;); // 触发APP.vue中的test1方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>C 组件 (Child2.vue)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;child-2&quot;&gt;</span><br><span class="line">        &lt;p&gt;props: &#123;&#123;pChild2&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;$attrs: &#123;&#123;$attrs&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;pChild2&#x27;],</span><br><span class="line">    inheritAttrs: false,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$emit(&#x27;test2&#x27;);// 触发APP.vue中的test2方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上述代码中：</p><p>C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性<br>在B组件中通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的）<br>总结<br>根据以上对这6种组件间的通信方法，可以将不同组件间的通信分为4种类型：父子组件间通信、跨代组件间通信、兄弟组件间通信、任意组件间通信</p><p>1、父子组件间通信<br>子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据。<br>通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组件，这样也可以实现通信。<br>使用 provide&#x2F;inject，在父组件中通过 provide提供变量，在子组件中通过 inject 来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide中的数据。<br>2、跨代组件间通信<br>跨代组件间通信其实就是多层的父子组件通信，同样可以使用上述父子组件间通信的方法，只不过需要多层通信会比较麻烦。<br>使用上述的6种方法的$attrs &#x2F; $listeners方法。<br>3、兄弟组件间通信<br>通过 $parent + $refs 以父组件为中间人来获取到兄弟组件，也可以进行通信。<br>4、任意组件间通信<br>使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。<br>如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 javascript vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的学习</title>
      <link href="/2022/10/29/vue%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/29/vue%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>## 脚手架文件结构</p><p>|—— node_modules</p><p>|—— public</p><p>|   |—— favicon.ico 页签图标</p><p>|   |__ index.html 主页面</p><p>|——src</p><p>|   |—— assets：存放静态资源</p><p>|   |   |__ logo.png</p><p>|   |—— component：存放组件</p><p>|   |   |__ HelloWord.vue</p><p>|   |—— App.vue：汇总所有组件</p><p>|   |—— main.js：入口文件</p><p>|—— .gitignore：git版本管制忽略的配置</p><p>|—— babel.config.js：babel的配置文件</p><p>|—— package.json：应用包配置文件</p><p>|—— README.md：应用描述文件</p><p>|—— package-lock.json：包版本控制文件</p><p>## 关于不同版本的vue：</p><p>- vue.js与vue.runtime.xxx.js的区别：</p><p>(1).vue.js时完整版的Vue，包含：核心功能 + 模板解析器</p><p>(2).vue.runtime.xxx.js时运行版的Vue，只包含： 核心功能   没有模板解析器</p><p>- 因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</p><p>render函数接收到createElement函数去制定具体内容</p><p>## vue.config.js配置文件</p><p>&gt; 使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置</p><p>&gt; 使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a></p><p>## ref属性</p><p>1.被用来给元素或子组件注册引用信息（id的替代者）</p><p>2.应用在html标签上获取的真实DOM元素，应用在组件标签上是组件实例对象（vc）</p><p>3.使用方式：</p><p>打标签：&lt;h1 ref&#x3D;”xxx”&gt;…&lt;&#x2F;h1&gt; &lt;School ref&#x3D;”sch”&gt;&lt;&#x2F;School&gt;</p><p>获取：this.$refs.xxx</p><p>## 配置项props</p><p>功能：让组件接收外部传过来的数据</p><p>(1).传递数据：</p><p>&lt;Demo name&#x3D;’xxx’&#x2F;&gt;</p><p>(2).接收数据</p><p>第一种方式（只接收）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props:[&#x27;name&#x27;]</span><br></pre></td></tr></table></figure><p>第二种方式（限制类型）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">                        name:String</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>第三种方式（限制类型，限制必要性，指定默认值）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">                        name:&#123;</span><br><span class="line">                            type:String, //类型</span><br><span class="line">                            required:true, //必要性</span><br><span class="line">                            default:&#x27;老王&#x27; //默认值</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，</p><p>若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data</p><p>中的数据</p><p>## mixin(混入)</p><p>功能：可以把多个组件共用的配置提取成一个混入对象</p><p>使用方式：</p><p>第一步定义混合，例如：</p><p>{<!-- --></p><p>data(){…..},</p><p>methods:{…..}</p><p>……</p><p>}</p><p>第二步使用混入，例如：</p><p>(1).全局混入：Vue.mixin(xxx)</p><p>(2).局部混入：mixins:[‘xxxx’]</p><p>## 插件</p><p>功能：用于增强Vue</p><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据</p><p>定义插件：</p><p>对象,install &#x3D; function(Vue,option){<!-- --></p><p>&#x2F;&#x2F; 1.添加全局过滤器</p><p>Vue.filter(….)</p><p>&#x2F;&#x2F; 2.添加全局指令</p><p>Vue.directive(….)</p><p>&#x2F;&#x2F; 3.配置全局混入</p><p>Vue.mixin(….)</p><p>&#x2F;&#x2F; 4.添加实例方法</p><p>Vue.prototype.$myMethod &#x3D; function {} ()</p><p>Vue.prototype.$myProperty &#x3D; xxxx</p><p>}</p><p>使用插件：Vue.use();</p><p>## scoped样式</p><p>作用：让样式再局部生效，防止冲突</p><p>写法：&lt;style scoped&gt;</p><p>## 总结TodoList案例</p><p>1.组件化编码流程：</p><p>（1）.拆分静态组件，组件要按照功能点拆分，命名不要与html元素冲突</p><p>（2）.实现动态组件，考虑好数据的存放位置，数据是一个组件在用，还是一些组件再用</p><p>1）.一个组件在用，放在组件自身即可</p><p>2）.一些组件在用，放在他们共同的父组件上(&lt;span style&#x3D;”color:red;”&gt;状态提升&lt;&#x2F;span&gt;)</p><p>（3）.实现交互：从绑定事件开始</p><p>2.props适用于：</p><p>（1）.父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件 通信</p><p>（2）.子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p><p>3.使用v-model是要切记；v-model绑定的值不能是props传过来的值，因为props是不可以修改的</p><p>4.props传过来的若是对象类型的值，修改对象的属性是Vue不会报错。但不推荐这样做</p><p>## webStorage</p><p>1.存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p><p>2.浏览器通过Window.sessionStorage 和 Window.localStorage属性来实现本地存储机制</p><p>3.相关API：</p><p>1.xxxxStorage.setItem(‘key’,’value’);</p><p>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</p><p>2.xxxxStorage.getItem(‘key’);</p><p>该方法接受一个键名作为参数，返回键名对应的值</p><p>3.xxxxStorage.removeItem(‘key’);</p><p>该方法接受一个键名作为参数，并把该键名从存储中删除</p><p>4.xxxxStorage.clear();</p><p>该方法会清空存储中的所有数据</p><p>4.备注：</p><p>1.SessionStorage存储的内容会随着浏览器窗口关闭而消失</p><p>2.LocalStorage存储的内容，需要手动清除才消失</p><p>3.xxxxStorage.getItem(xxx)如果xxx对应的value获取不到，那么getItem的返回值是null</p><p>4.JSON.parse(null)的结果依然为null</p><p>## 组件的自定义事件</p><p>1.一种组件间通信的方式：适用于子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</p><p>2.使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）</p><p>3.绑定自定义事件：</p><p>1.第一种方式，在父组件中：&lt;Demo @atguigu&#x3D;”test”&gt; 或 &lt;Demo v-on:atguigu&#x3D;”test”&gt;</p><p>2.第二种方式，在父组件中：</p><p>&lt;Demo ref&#x3D;”demo”&gt;</p><p>mounted(){<!-- --></p><p>this.$refs.xxx.$on(‘atguigu’,this.test)</p><p>}</p><p>4.触发自定义事件：this.$emit(‘atguigu’,数据)</p><p>5.解绑自定义事件：this.$off(‘atguigu’)</p><p>6.组件上也可以绑定原生DOM事件，需要使用native修饰符</p><p>7.注意：通过this.$refs.xxx.$on(‘atguigu’,回调)绑定自定义事件，回调要么配置在methods中，要么用箭头函数，否则this的指向会出问题</p><p>## 全局事件总线（GlobalEventBus）</p><p>1.一种组件间通信的方式，适用于任意组件间通信</p><p>2.安装全局事件总线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">            beforeCreate()&#123;</span><br><span class="line">                Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>3.使用事件总线：</p><p>1.接收数据：A组件向接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">                demo(data)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mounted()&#123;</span><br><span class="line">                this.$bus.$on(&#x27;xxx&#x27;,this.demo)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.提供数据：this.$bus.$emit(‘xxxx’,数据)</p><p>4.最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件</p><p>## 消息订阅与发布（pubsub）</p><p>1.一种组件间通信的方式，适用于任意组件间通信</p><p>2.使用步骤：</p><p>1.安装pubsub：npm i pubsub-js</p><p>2.引入：import pubsub from ‘pubsub-js’</p><p>3.接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">                demo(data)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mounted()&#123;</span><br><span class="line">                this.pid = pubsub.subscribe(&#x27;xxx&#x27;,this.demo)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>4.提供数据：pubsub.publish(‘xxx’,数据)</p><p>5.最好在beforeDestroy钩子中,用pubsub.unsubscribe(pid)去取消订阅</p><p>## nextTick</p><p>1.语法：this.$nextTick(回调函数)</p><p>2.作用：在下一次DOM更新结束后执行其指定的回调</p><p>3.什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</p><p>## Vue封装的过渡与动画</p><p>1.作用:在插入，更新或移除DOM元素时，在合适的时候给元素添加样式类名</p><p>2.写法：</p><p>1.准备好样式：</p><p>元素进入的样式：</p><p>1.v-enter:进入的起点</p><p>2.v-enter-active：进入过程中</p><p>3.v-enter-to：进入的终点</p><p>元素离开的样式：</p><p>1.v-leave：离开的起点</p><p>2.v-leave-active：离开过程中</p><p>3.v-leave-to：离开的终点</p><p>2.使用&lt;transition&gt;包裹要过渡的元素，并配置name属性</p><p>&lt;transition name&#x3D;”hello”&gt;</p><p>&lt;h1 v-show&#x3D;”isShow”&gt;你好啊！&lt;&#x2F;h1&gt;</p><p>&lt;&#x2F;transition&gt;</p><p>3.备注：若有多个元素需要过渡，则需要使用：&lt;transition-group&gt;,且每个元素都要指定key值</p><p>## Vue脚手架配置代理</p><p>方法一</p><p>在vue.config.js中添加如下配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">            proxy:&#x27;http://localhost:5000&#x27;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>1.优点：配置简单，请求资源时直接发送给前端（8080）即可</p><p>2.缺点：不能配置多个代理，不能灵活的控制请求是否走代理</p><p>3.工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</p><p>方法二：</p><p>编写vue.config.js配置具体代理规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">            devServer:&#123;</span><br><span class="line">                proxy:&#123;</span><br><span class="line">                    &#x27;/api&#x27;:&#123; //匹配所有以&#x27;/api&#x27;来头的请求路径</span><br><span class="line">                        target:&#x27;http://localhost:5000&#x27;, // 代理目标的基础路径</span><br><span class="line">                        changeOrigin:true,</span><br><span class="line">                        pathRewrite:&#123;&#x27;^/api&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#x27;/api&#x27;:&#123; //匹配所有以&#x27;/api&#x27;来头的请求路径</span><br><span class="line">                        target:&#x27;http://localhost:5001&#x27;, // 代理目标的基础路径</span><br><span class="line">                        changeOrigin:true,</span><br><span class="line">                        pathRewrite:&#123;&#x27;^/api2&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>&#x2F;*</p><p>changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</p><p>changeOrigin设置为false时，服务器收到的请求头中的host为:localhost:8000</p><p>changeOrigin默认值为true</p><p>*&#x2F;</p><p>说明：</p><p>1.优点：可以配置多个代理，且可以灵活的控制请求是否走代理</p><p>2.缺点：配置略微繁琐，请求资源时必须加前缀</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js 学习 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http缓存</title>
      <link href="/2022/10/22/http%E7%BC%93%E5%AD%98/"/>
      <url>/2022/10/22/http%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h3 id="2、http-缓存"><a href="#2、http-缓存" class="headerlink" title="2、http 缓存"></a>2、http 缓存</h3><ul><li>关于缓存的介绍。</li><li>http 缓存策略（强制缓存 + 协商缓存）。</li><li>刷新操作方式，对缓存的影响。</li></ul><p>4.1 关于缓存</p><p>什么是缓存？ 把一些不需要重新获取的内容再重新获取一次</p><p>为什么需要缓存？ 网络请求相比于 CPU 的计算和页面渲染是非常非常慢的。</p><p>哪些资源可以被缓存？ 静态资源，比如 js css img。</p><p>4.2 强制缓存</p><p>Cache-Control：</p><ul><li>在 Response Headers 中。</li><li>控制强制缓存的逻辑。</li><li>例如 Cache-Control: max-age&#x3D;3153600（单位是秒）</li></ul><p>Cache-Control 有哪些值：</p><ul><li>max-age：缓存最大过期时间。</li><li>no-cache：可以在客户端存储资源，每次都必须去服务端做新鲜度校验，来决定从服务端获取新的资源（200）还是使用客户端缓存（304）。</li><li>no-store：永远都不要在客户端存储资源，永远都去原始服务器去获取资源。</li></ul><p>4.3 协商缓存（对比缓存）</p><ul><li>服务端缓存策略。</li><li>服务端判断客户端资源，是否和服务端资源一样。</li><li>一致则返回 304，否则返回 200 和最新的资源。</li></ul><p><img src="https://img-blog.csdnimg.cn/b2978cba4444446c9a63e07d27f4196c.png"></p><p> </p><p>资源标识：</p><ul><li>在 Response Headers 中，有两种。</li><li>Last-Modified：资源的最后修改时间。</li><li>Etag：资源的唯一标识（一个字符串，类似于人类的指纹）。</li></ul><p><strong>Last-Modified：</strong> 服务端拿到 if-Modified-Since 之后拿这个时间去和服务端资源最后修改时间做比较，如果一致则返回 304 ，不一致（也就是资源已经更新了）就返回 200 和新的资源及新的 Last-Modified。</p><p><img src="https://img-blog.csdnimg.cn/4e9fe609868d4ba599edf74e4bd0d057.png"></p><p> </p><p><strong>Etag：</strong> 其实 Etag 和 Last-Modified 一样的，只不过 Etag 是服务端对资源按照一定方式（比如 contenthash）计算出来的唯一标识，就像人类指纹一样，传给客户端之后，客户端再传过来时候，服务端会将其与现在的资源计算出来的唯一标识做比较，一致则返回 304，不一致就返回 200 和新的资源及新的 Etag。</p><p><strong>两者比较：</strong></p><ul><li>优先使用 Etag。</li><li>Last-Modified 只能精确到秒级。</li><li>如果资源被重复生成，而内容不变，则 Etag 更精确。</li></ul><p>4.4 综述</p><p><img src="https://img-blog.csdnimg.cn/bd42fe4f6da44b6e96a7d770dd43077b.png"></p><p> </p><p>4.4 三种刷新操作对 http 缓存的影响</p><ul><li>正常操作：地址栏输入 url，跳转链接，前进后退等。</li><li>手动刷新：f5，点击刷新按钮，右键菜单刷新。</li><li>强制刷新：ctrl + f5，shift+command+r。</li></ul><p><strong>正常操作：强制缓存有效，协商缓存有效。</strong> <strong>手动刷新：强制缓存失效，协商缓存有效。</strong> <strong>强制刷新：强制缓存失效，协商缓存失效。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 java 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的基础内容</title>
      <link href="/2022/10/15/js%E7%9A%84%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
      <url>/2022/10/15/js%E7%9A%84%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h2 id="1-JavaScript-内置的常用对象有哪些？并列举该对象常用的方法？"><a href="#1-JavaScript-内置的常用对象有哪些？并列举该对象常用的方法？" class="headerlink" title="1. JavaScript 内置的常用对象有哪些？并列举该对象常用的方法？"></a>1. JavaScript 内置的常用对象有哪些？并列举该对象常用的方法？</h2><p><strong>Number 数值对象，数值常用方法</strong></p><ul><li>Number.toFixed( ) 采用定点计数法格式化数字</li><li>Number.toString( ) 将—个数字转换成字符串</li><li>Number.valueOf( ) 返回原始数值</li></ul><p><strong>String 字符串对象，字符串常用方法</strong></p><ul><li>Length 获取字符串的长度</li><li>split()将一个字符串切割数组</li><li>concat() 连接字符串</li><li>indexOf()返回一个子字符串在原始字符串中的索引值。如果没有找到，则返回固定值 -1</li><li>lastIndexOf() 从后向前检索一个字符串</li><li>slice() 抽取一个子串</li></ul><p><strong>Boolean 布尔对象，布尔常用方法</strong></p><ul><li>Boolean.toString() 将布尔值转换成字符串</li><li>Boolean.valueOf() Boolean 对象的原始值的布尔值</li></ul><p><strong>Array 数组对象，数组常用方法</strong></p><ul><li>join() 将一个数组转成字符串。返回一个字符串</li><li>reverse() 将数组中各元素颠倒顺序</li><li>delete 运算符只能删除数组元素的值，而所占空间还在，总长度没变(arr.length)</li><li>shift()删除数组中第一个元素，返回删除的那个值，并将长度减 1</li><li>pop()删除数组中最后一个元素，返回删除的那个值，并将长度减 1</li><li>unshift() 往数组前面添加一个或多个数组元素，长度会改变</li><li>push() 往数组结尾添加一个或多个数组元素，长度会改变</li><li>concat() 连接数组</li><li>slice() 切割数组，返回数组的一部分</li><li>splice()插入、删除或替换数组的元素</li><li>toLocaleString() 把数组转换成局部字符串</li><li>toString()将数组转换成一个字符串</li><li>forEach()遍历所有元素</li><li>every()判断所有元素是否都符合条件</li><li>sort()对数组元素进行排序</li><li>map()对元素重新组装，生成新数组</li><li>filter()过滤符合条件的元素</li><li>find() 查找 返回满足提供的测试函数的第一个元素的值。否则返回 undefined。</li><li>some() 判断是否有一个满足条件 ，返回布尔值</li><li>fill() 填充数组</li><li>flat() 数组扁平化</li></ul><p><strong>Function 函数对象，函数常用方法</strong></p><ul><li>Function.arguments 传递给函数的参数</li><li>Function.apply() 将函数作为一个对象的方法调用</li><li>Function.call() 将函数作为对象的方法调用</li><li>Function.caller 调用当前函数的函数</li><li>Function.length 已声明的参数的个数</li><li>Function.prototype 对象类的原型</li><li>Function.toString() 把函数转换成字符串</li></ul><p><strong>Object 基础对象，对象常用方法</strong></p><ul><li>Object 含有所有 JavaScript 对象的特性的超类</li><li>Object.constructor 对象的构造函数</li><li>Object.hasOwnProperty( ) 检查属性是否被继承</li><li>Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型</li><li>Object.propertyIsEnumerable( ) 是否可以通过 for&#x2F;in 循环看到属性</li><li>Object.toLocaleString( ) 返回对象的本地字符串表示</li><li>Object.toString( ) 定义一个对象的字符串表示</li><li>Object.valueOf( ) 指定对象的原始值</li></ul><p><strong>Date 日期时间对象，日期常用方法</strong></p><ul><li>Date.getFullYear() 返回 Date 对象的年份字段</li><li>Date.getMonth() 返回 Date 对象的月份字段</li><li>Date.getDate() 返回一个月中的某一天</li><li>Date.getDay() 返回一周中的某一天</li><li>Date.getHours() 返回 Date 对象的小时字段</li><li>Date.getMinutes() 返回 Date 对象的分钟字段</li><li>Date.getSeconds() 返回 Date 对象的秒字段</li><li>Date.getMilliseconds() 返回 Date 对象的毫秒字段</li><li>Date.getTime() 返回 Date 对象的毫秒表示</li></ul><p><strong>Math 数学对象，数学常用方法</strong></p><ul><li>Math 对象是一个<code>静态对象</code></li><li>Math.PI 圆周率</li><li>Math.abs() 绝对值</li><li>Math.ceil() 向上取整(整数加 1，小数去掉)</li><li>Math.floor() 向下取整(直接去掉小数)</li><li>Math.round() 四舍五入</li><li>Math.pow(x，y) 求 x 的 y 次方</li><li>Math.sqrt() 求平方根</li></ul><p><strong>RegExp 正则表达式对象，正则常用方法</strong></p><ul><li>RegExp.exec() 检索字符串中指定的值。返回找到的值，并确定其位置。</li><li>RegExp.test( ) 检索字符串中指定的值。返回 true 或 false。</li><li>RegExp.toString( ) 把正则表达式转换成字符串</li><li>RegExp.globa 判断是否设置了 “g” 修饰符</li><li>RegExp.ignoreCase 判断是否设置了 “i” 修饰符</li><li>RegExp.lastIndex 用于规定下次匹配的起始位置</li><li>RegExp.source 返回正则表达式的匹配模式</li></ul><p><strong>Error 异常对象</strong></p><ul><li>Error.message 设置或返回一个错误信息(字符串)</li><li>Error.name 设置或返回一个错误名</li><li>Error.toString( ) 把 Error 对象转换成字符串</li></ul><h3 id="2-Set、Map、WeakSet、WeakMap"><a href="#2-Set、Map、WeakSet、WeakMap" class="headerlink" title="2. Set、Map、WeakSet、WeakMap"></a>2. Set、Map、WeakSet、WeakMap</h3><p><code>Set</code>、<code>Map</code>、<code>WeakSet</code>、<code>WeakMap</code>是ES2015中新增的几个对象：</p><p><strong>set</strong>类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构。</p><p><code>Set</code>和<code>WeakSet</code>与数组类似，准确的它他们是集合，这两者的区别就是<code>Set</code>可以存储任何数据类型，而<code>WeakSet</code>只能存储对象的引用，而且是弱引用；</p><p><code>Set</code>对象在实际开发中最常见的就是实现数据去重，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 2, 3, 4, 3, 5]</span><br><span class="line">const set = new Set(arr)</span><br><span class="line">// set对象可以使用 ... 展开 所有项</span><br><span class="line">console.log([...set]) // [ 1, 2, 3, 4, 5 ]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>map</strong>类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><p><code>Map</code>和<code>WeakMap</code>与对象类似，存储方式是键值对形式的，这两者的区别<code>Map</code>的键值对都是可以是任意的而<code>WeakMap</code>键必须是对象的引用而值可以是任意类型的。</p><h2 id="3-并发与并行的区别？"><a href="#3-并发与并行的区别？" class="headerlink" title="3. 并发与并行的区别？"></a>3. 并发与并行的区别？</h2><ul><li>并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。</li><li>并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。</li></ul><h2 id="4-setTimeout、setInterval、requestAnimationFrame的区别"><a href="#4-setTimeout、setInterval、requestAnimationFrame的区别" class="headerlink" title="4. setTimeout、setInterval、requestAnimationFrame的区别"></a>4. setTimeout、setInterval、requestAnimationFrame的区别</h2><ul><li><strong>setTimeout</strong></li></ul><p>执行该语句时，是立即把当前定时器代码推入事件队列，当定时器在事件列表中满足设置的时间值时将传入的函数加入任务队列，之后的执行就交给任务队列负责。但是如果此时任务队列不为空，则需等待，所以执行定时器内代码的时间可能会大于设置的时间。</p><p>返回值<code>timeoutID</code>是一个正整数，表示定时器的编号。这个值可以传递给<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/clearTimeout" title="clearTimeout()">clearTimeout()</a>来取消该定时器。</p><ul><li><strong>setInterval</strong></li></ul><p>重复调用一个函数或执行一个代码片段，每次都精确的隔一段时间推入一个事件（但是，事件的执行时间不一定就不准确，还有可能是这个事件还没执行完毕，下一个事件就来了）。它返回一个 <code>interval ID</code>，该 ID 唯一地标识时间间隔，因此你可以稍后通过调用 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval" title="clearInterval()">clearInterval()</a> 来移除定时器。</p><p><strong>技术上，<code>clearTimeout()</code> 和 <code>clearInterval()</code>可以互换。但是，为了避免混淆，不要混用取消定时函数。</strong></p><ul><li><strong>requestAnimationFrame</strong></li></ul><p>是JS实现动画的一种方式，它告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript java 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载</title>
      <link href="/2022/09/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/09/24/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p><strong>原理</strong></p><p>优先加载可视区域的内容，其他部分等进入了可视区域再加载，从而提高性能</p><p><strong>原理：</strong></p><p>一张图片就是一个<code>&lt;img&gt;</code>标签，浏览器是否发起请求图片是根据<code>&lt;img&gt;</code>的<code>src</code>属性，所以实现懒加载的关键就是，在图片没有进入可视区域时，先不给<code>&lt;img&gt;</code>的src赋值，这样浏览器就不会发送请求了，等到图片进入可视区域再给<code>src</code>赋值。</p><p><strong>实现思路：</strong></p><ol><li><p>加载<code>loading</code>图片</p></li><li><p>判断哪些图片要加载【重点】</p><p>当图片距离顶部的距离top-height等于可视区域h和滚动区域高度s之和时说明图片马上就要进入可视区了</p></li><li><p>隐形加载图片</p><p>创建一个临时图片，new Image() ，不会加载到页面上去，实现隐形加载</p></li><li><p>替换真图片</p><p>替换src属性</p></li></ol><p>代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function lazyload() &#123;</span><br><span class="line">  const imgs = document.getElementsByTagName(&#x27;img&#x27;);</span><br><span class="line">  const len = imgs.length;</span><br><span class="line">  // 视口的高度</span><br><span class="line">  const viewHeight = document.documentElement.clientHeight;</span><br><span class="line">  // 滚动条高度</span><br><span class="line">  const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">  for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    const offsetHeight = imgs[i].offsetTop;</span><br><span class="line">    if (offsetHeight &lt; viewHeight + scrollHeight) &#123;</span><br><span class="line">      const src = imgs[i].dataset.src;</span><br><span class="line">      imgs[i].src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 服务器 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见问题</title>
      <link href="/2022/09/17/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/17/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h2 id="1-什么是尾调用优化和尾递归？"><a href="#1-什么是尾调用优化和尾递归？" class="headerlink" title="1. 什么是尾调用优化和尾递归？"></a>1. 什么是尾调用优化和尾递归？</h2><p>就是指某个函数的最后一步是调用另一个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">    let m = 1; </span><br><span class="line">    let n = 2; </span><br><span class="line">    return g(m + n); </span><br><span class="line">&#125; </span><br><span class="line">f(); </span><br><span class="line"></span><br><span class="line">// 等同于 </span><br><span class="line">function f() &#123; </span><br><span class="line">    return g(3); </span><br><span class="line">&#125; </span><br><span class="line">f(); </span><br><span class="line"></span><br><span class="line">// 等同于 </span><br><span class="line">g(3);</span><br></pre></td></tr></table></figure><p><strong>尾调用优化</strong><br>尾调用之所以与其他调用不同，就在于它的特殊的调用位置。<br>我们知道，函数调用会在内存形成一个”调用记录”，又称”调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，就形成一个”调用栈”（call stack）。<br>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。</p><p>上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除 f() 的调用记录，只保留 g(3) 的调用记录。<br>这就叫做”尾调用优化”（Tail call optimization），即只保留内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。这就是”尾调用优化”的意义</p><p><strong>尾递归</strong></p><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function factorial(n) &#123; </span><br><span class="line">    if (n === 1) return 1; </span><br><span class="line">    return n * factorial(n - 1); </span><br><span class="line">&#125; </span><br><span class="line">factorial(5) // 120</span><br></pre></td></tr></table></figure><p>递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生”栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生”栈溢出”错误。</p><p>上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。</p><p>“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6也是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署”尾调用优化”。这就是说，在 ES6 中，只要使用尾递归，就不会发生栈溢出，相对节省内存。</p><h3 id="2-防抖节流"><a href="#2-防抖节流" class="headerlink" title="2.防抖节流"></a>2.防抖节流</h3><p><strong>防抖</strong></p><ul><li>防抖是指在事件触发n秒后再执行，如果在n秒内再次被触发，则重新计算时间。（就是在触发某个事件后，在下一次触发之前，中间的间隔时间如果超过设置的时间才会发送请求，一直触发就不会发送请求 应用场景：</li></ul><p>  a、scroll事件滚动触发，<br>  b、搜索框输入查询<br>  c、表单验证<br>  d、按钮提交事件<br>  e、浏览器窗口缩放，resize事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, delay) &#123;</span><br><span class="line">        let timer = null // 计时器</span><br><span class="line">        return function (...args) &#123;</span><br><span class="line">          clearTimeout(timer) // 清除上一次计时器</span><br><span class="line">          timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            // 重新定时</span><br><span class="line">            func.apply(this, args)</span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>节流</strong></p><ul><li>节流是指如果持续触发某个事件，则每隔n秒执行一次。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function throtte(func, time) &#123;</span><br><span class="line">        let timer = null // 计时器</span><br><span class="line">        return function (...args) &#123;</span><br><span class="line">          if (timer) return // 无视，直接返回</span><br><span class="line">          timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            func.apply(this, args)</span><br><span class="line">          &#125;, time)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p> </p><h3 id="3-深拷贝和浅拷贝"><a href="#3-深拷贝和浅拷贝" class="headerlink" title="3.深拷贝和浅拷贝"></a>3.深拷贝和浅拷贝</h3><ul><li><p>浅拷贝：只是拷贝一层，更深层次对象级别的只拷贝了地址</p></li><li><p>深拷贝：层层拷贝，每一级别的数据都会拷贝</p></li><li><p>浅拷贝方法：<br>1. 使用 lodash 浅拷贝 <code>clone</code> 方法，让他们俩指向不同地址<br>2. 使用 <code>Object.assign</code> 方法<br>3. 使用es6语法的 <code>...</code> 拓展运算符</p><ul><li><p>深拷贝方法：<br>1. 使用<code>JSON.parse(JSON.stringify(obj))</code> ，缺点：当对象有方法和undefined属性的时候会丢失<br>2. 使用<code>递归</code></p></li><li><p>如果存在<code>循环引用</code>就会出现<code>堆栈溢出</code></p></li><li><p>解决思路：把处理好的对象存起来，在处理新的对象的时候，会现在这个存的地方找一找有没有处理好，如果有就直接返回就行了</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">        name: &quot;zs&quot;,</span><br><span class="line">        age: 20,</span><br><span class="line">        father: [2, 3, 4],</span><br><span class="line">      &#125;;</span><br><span class="line"> </span><br><span class="line">      function deepClone(target) &#123;</span><br><span class="line">        //这一行如果不用三元判断 如果是数组会有bug会被拷贝成伪数组对象</span><br><span class="line">        let tempObj = Array.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">        for (let key in target) &#123;</span><br><span class="line">          if (typeof target[key] === &quot;object&quot;) &#123;</span><br><span class="line">            tempObj[key] = deepClone(target[key]);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            tempObj[key] = target[key];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tempObj;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      let obj1 = deepClone(obj);</span><br><span class="line">      console.log(obj1);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2022/09/11/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/09/11/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>生命周期：</p><p>1.又名：生命周期回调函数，生命周期函数，生命周期钩子</p><p>2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数</p><p>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</p><p>4.生命周期函数中的this指向是vm 或 组件实例对象</p><p>创建和销毁生命周期：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip = false;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            opacity:1,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            stop()&#123;</span><br><span class="line">                // clearInterval(this.timer);</span><br><span class="line">                this.$destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //  Vue完成模板的解析并把初始的真实的DOM元素放入页面后（挂载完毕）调用mounted</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.timer = setInterval(()=&gt;&#123;</span><br><span class="line">                this.opacity -=0.01;</span><br><span class="line">                if(this.opacity &lt;= 0) this.opacity = 1;</span><br><span class="line">            &#125;,1000)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>常用的生命周期钩子：</p><p>1.mounted：发送ajax请求，启动定时器，绑定自定义事件，订阅消息等【初始化操作】</p><p>2.beforeDestroy：清除定时器，解绑自定义事件，取消订阅消息等【收尾工作】</p><p>关于销毁Vue实例</p><p>1.销毁后借助Vue开发者工具看不到任何信息</p><p>2.销毁后自定义事件会失效，但原生DOM事件依然有效</p><p>3.一般不会再beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了</p><p>附录：生命周期图片</p><p><img src="https://img-blog.csdnimg.cn/75edd227abf7461e95da1406455bf104.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js 前端 javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Vue</title>
      <link href="/2022/09/03/%E5%88%9D%E8%AF%86Vue/"/>
      <url>/2022/09/03/%E5%88%9D%E8%AF%86Vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>初始Vue：</p><p>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</p><p>2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</p><p>3.root容器里的代码被称为【Vue模板】</p><p>4.Vue实例和容器时一一对应的</p><p>5.真实开发中只有一个Vue实例，且xxx可以自动读取到data中的所有属性；</p><p>6.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新了；</p><p>7.{<!-- -->{xxx}}中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</p><p>注意区分:js表达式和js代码(语句)</p><p>1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方；</p><p>(1).a</p><p>(2).a+b</p><p>(3).demo(1)</p><p>(4). x&#x3D;&#x3D;y ? ‘a’:’b’</p><p>2.js代码（语句）</p><p>(1)if(){}</p><p>(2)for(){}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;../../js/vue.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;ago&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false; //阻止vue在启动是生成提示</span><br><span class="line">    let vm =new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,  //el用于指定当前Vue实例为哪个容器服务</span><br><span class="line">        data:&#123;//data中用于存储数据，数据供el所指定的容器去使用，值暂时先写成一个对象</span><br><span class="line">            name:&#x27;Vue&#x27;,</span><br><span class="line">            ago:&quot;1000 years&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js javascript 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划常见问题</title>
      <link href="/2022/08/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/08/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这个也是通过看视频来总结的两个类型的问题关于动态规划问题</p><p>1.动态规划之选数问题</p><p>题目要求：</p><p>假设给定一串数字{1, 2, 4, 1, 7, 8, 3}，我们要从中选择若干个数，使最后的和达到最大。选择的规则是，不能选相邻的数字。比如：如果我们选了第一个数字1，那么我们就不能选2，如果我们选择了数字4，那么我们就不能选择与它相邻的2和1。</p><p>动态规划的思想：将整个问题划分成一个个子问题，也就是说要求整个数列的最大和，可以先求出前面若干个数的和，一直划分到求出只有一个数的最大和（即本身），而每个子问题的解对于后面的结果都是有用的，这就是用到了动态规划的思想</p><p>思路：</p><p>对于每个数，都有选和不选两种状态，如果选了这个数，那么就不能选他相邻的那个数，那么最大和就等于本身加上他相邻的那位数之前那些数的最大和，如果不选这个数，那么便可以选它相邻的那个数，那么最大和就等于这个数之前的那些数的最大和。最终的结果就是取这两种选择的最大值</p><p>这里就可以使用递归，即Math.max(dp(arr, x-2)+arr[x], dp(arr, x-1))；</p><p>递归的出口：</p><p>如果只有一个数，那么最大和就是本身<br>如果只有两个数，那么最大和就是这两个数中的最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static int dp(int[] arr)&#123;</span><br><span class="line">    int[] temp=new int[arr.length];</span><br><span class="line">    temp[0]=arr[0];</span><br><span class="line">    temp[1]=Math.max(arr[0], arr[1]);</span><br><span class="line">    for(int i=2;i&lt;arr.length;i++)&#123;</span><br><span class="line">        temp[i]=Math.max(temp[i-2]+arr[i],temp[i-1]);</span><br><span class="line">    &#125;</span><br><span class="line">    return temp[arr.length-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-动态规划之最长公共子序列"><a href="#2-动态规划之最长公共子序列" class="headerlink" title="2. 动态规划之最长公共子序列"></a>2. 动态规划之最长公共子序列</h2><p>题目描述：</p><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，“ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的公共子序列是这两个字符串所共同拥有的子序列。</p><p>若这两个字符串没有公共子序列，则返回 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static int longestCommonSubsequence(String text1, String text2) &#123;</span><br><span class="line">    int len1=text1.length();</span><br><span class="line">    int len2=text2.length();</span><br><span class="line">    char[] ch1=text1.toCharArray();</span><br><span class="line">    char[] ch2=text2.toCharArray();</span><br><span class="line"></span><br><span class="line">    //动态规划算法创建的二维数组一般都得多增一行一列，这是为了防止数组越界异常</span><br><span class="line">    int[][] p=new int[len1+1][len2+1];</span><br><span class="line"></span><br><span class="line">    //填表，第一行和第一列都为0，所以填表从下标为1的行和下标为1的列开始填</span><br><span class="line">    for(int i=1;i&lt;p.length;i++)&#123;</span><br><span class="line">        for(int j=1;j&lt;p[0].length;j++)&#123;</span><br><span class="line">            if(ch1[i-1]==ch2[j-1])&#123;</span><br><span class="line">                p[i][j]=p[i-1][j-1]+1;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                p[i][j]=Math.max(p[i-1][j], p[i][j-1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return p[len1][len2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 leetcode 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这周的日常</title>
      <link href="/2022/08/06/%E8%BF%99%E5%91%A8%E7%9A%84%E6%97%A5%E5%B8%B8/"/>
      <url>/2022/08/06/%E8%BF%99%E5%91%A8%E7%9A%84%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>其实这周的任务也不是很重，小组这块主要就是改bug和算法的练习，算法自己写着是真的没有什么手感，这里面的题好多都是没有思路的，我也是想分享自己决定比较难的算法类型：</p><p>题目：在m*n的棋盘里每格一个礼物，每个礼物有价值（大于0）。你从棋盘左上角开始拿礼物，并每次往左和下移动一格，直到达到棋盘右下角。问最多拿多少价值的礼物？</p><p>解题思路：<br>        找某个位置的最大价值礼物，只要知道它的上面位置和左边位置的最大价值，再加上本身的价值，就能得出结果。递归可解。<br>几个注意点：<br>        1.递归替换成循环，和之前一样，减少重复计算。<br>解题步骤：<br>        先推递归式：f ( i , j ) &#x3D; m a x ( f ( i , j − 1 ) , f ( i − 1 , j ) ) + g ( i , j ) f(i,j)&#x3D;max(f(i,j-1),f(i-1,j))+g(i,j)f(i,j)&#x3D;max(f(i,j−1),f(i−1,j))+g(i,j)，觉得不好看的话，就写个伪码吧f ( i , j ) &#x3D; m a x ( l e f t , u p ) + g ( i , j ) f(i,j)&#x3D;max(left, up)+g(i,j)f(i,j)&#x3D;max(left,up)+g(i,j)，其中g(i,j)是位置本身礼物的价值，f(i,j)表示当前拿到的最大礼物的价值，别弄混了，然后遍历数组，算出每个位置的最大礼物价值，得到的价值用一个二维数组maxValues记录起来。<br>取出二维数组右下角的值即为答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxValue(int[][] grid) &#123;</span><br><span class="line">        int m = grid.length, n = grid[0].length;</span><br><span class="line">        for(int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            for(int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                if(i == 0 &amp;&amp; j == 0) continue;</span><br><span class="line">                if(i == 0) grid[i][j] += grid[i][j - 1] ;</span><br><span class="line">                else if(j == 0) grid[i][j] += grid[i - 1][j];</span><br><span class="line">                else grid[i][j] += Math.max(grid[i][j - 1], grid[i - 1][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return grid[m - 1][n - 1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我决定动态规划的变形有好多，也是见过几道，但是再看见还是不太清楚该怎么想，怎么去写，记录下来，以后可以回过来看</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改bug的一周</title>
      <link href="/2022/07/31/%E6%94%B9bug%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/07/31/%E6%94%B9bug%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周主要就是对bug进行修改，然后自己也是遇见一个问题，困扰了我好长时间，就是根据上一级的数据渲染下一级的数据，这样得使用到promise异步处理，自己也是弄了好长时间，招人问了，终于解决了</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function bns(id,name,names,othername,numbers)&#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            method:&#x27;get&#x27;,</span><br><span class="line">            url:&#x27;/admins/selectOrganization&#x27;,</span><br><span class="line">            params:&#123;</span><br><span class="line">                id:id,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then((date)=&gt;&#123;</span><br><span class="line">            // console.log(date.data);</span><br><span class="line">            let all = date.data.data;</span><br><span class="line">            let html = `&lt;dd class=&quot;layer-select-tips layer-this $&#123;names&#125;&quot; &gt;请选择&lt;/dd&gt;`;</span><br><span class="line">            for(let i=0;i&lt;all.length;i++)&#123;</span><br><span class="line">                html += `&lt;dd class=&quot;layer-select-tips $&#123;names&#125;&quot; value=&quot;$&#123;all[i].name&#125;&quot; id=&quot;$&#123;all[i].id&#125;&quot;&gt;$&#123;all[i].name&#125;&lt;/dd&gt;`;</span><br><span class="line">            &#125;</span><br><span class="line">            layer_list[numbers].innerHTML = html;</span><br><span class="line">            if(numbers == 1 )&#123;</span><br><span class="line">                selectTitle(layer_click,academy,1);</span><br><span class="line">            &#125;else if(numbers == 2 )&#123;</span><br><span class="line">                selectTitle(layer_click,major,2);</span><br><span class="line">            &#125;else if(numbers == 3)&#123;</span><br><span class="line">                selectTitle(layer_click,grade,3);</span><br><span class="line">            &#125;</span><br><span class="line">            let clist = &#x27;layer-this&#x27;;</span><br><span class="line">            for(let j=0;j&lt;name.length;j++)&#123;</span><br><span class="line">                if(name[j].innerHTML == othername)&#123;</span><br><span class="line">                    console.log(name[j].innerHTML);</span><br><span class="line">                    console.log(othername);</span><br><span class="line">                    // switchover(name,i,clist);</span><br><span class="line">                    switchover(name,j,clist);</span><br><span class="line">                    let ids = name[j].id</span><br><span class="line">                    if(numbers != 3)&#123;</span><br><span class="line">                        resolve(ids)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch((err)=&gt;&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一级一级渲染：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn(all[i].grade).then(function (value) &#123;</span><br><span class="line">                    console.log(value)</span><br><span class="line">                    console.log(1)</span><br><span class="line">                    return bns(value,academy,&#x27;academy&#x27;,layer_input[3].value,1);</span><br><span class="line">                &#125;).then((value) =&gt; &#123;</span><br><span class="line">                    return bns(value,major,&#x27;major&#x27;,layer_input[4].value,2);</span><br><span class="line">                &#125;).then((value) =&gt; &#123;</span><br><span class="line">                    return bns(value,grade,&#x27;grade&#x27;,layer_input[5].value,3);</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure><p>通过用promise对axios再封装，实现对数据的一级一级的获取。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法的日常行为</title>
      <link href="/2022/07/23/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%A5%E5%B8%B8%E8%A1%8C%E4%B8%BA/"/>
      <url>/2022/07/23/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%A5%E5%B8%B8%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>总结：这周主要是按照计划来进行，然后在算法中也是遇到了自己不是很熟悉的知识点，这道算法</p><p>自己也去查了很多 ，看一下：</p><p>重建二叉树：</p><p>1.<strong>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。（没有重复的数字）</strong></p><p>2.假设输入的前序<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86&spm=1001.2101.3001.7020" title="遍历">遍历</a>和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列                {1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for binary tree</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    // 被调用函数</span><br><span class="line">    public TreeNode reConstructTree(int [] pre, int prestart, int preend,int [] in, int instart, int inend)&#123;</span><br><span class="line"></span><br><span class="line">        if(prestart &gt; preend || instart &gt; inend) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 构建根节点</span><br><span class="line">        int rootvalue = pre[prestart];</span><br><span class="line">        TreeNode root = new TreeNode(rootvalue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // for循环找到中序数组中的根节点下标，以此下标减去 中序数组 首节点下标， 得到中序数组中 左子树的size</span><br><span class="line">        int index = 0;</span><br><span class="line">        for(int i=instart; i&lt;=in.length; i++) &#123;</span><br><span class="line">            if(in[i] == root.val) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int leftsize = index - instart;</span><br><span class="line"></span><br><span class="line">        // 分别递归构造根节点的左右子树</span><br><span class="line">        root.left = reConstructTree(pre, prestart+1, prestart+leftsize, in, instart, index-1);</span><br><span class="line">        root.right = reConstructTree(pre, prestart+leftsize+1, preend, in, index+1, inend);</span><br><span class="line"></span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //函数入口， 传入一个 前序数组 和 一个中序数组</span><br><span class="line">    public TreeNode reConstructBinaryTree(int [] pre,int [] in) &#123;</span><br><span class="line">        if(pre == null || in == null)</span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return reConstructTree(pre, 0, pre.length-1, in, 0, in.length-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较难理解的点：</p><p>1.边界条件的考虑；</p><p>在索引数组最后一个节点的时候，需要注意length指的是数组的长度，而 pre.length 已经超过了数组的索引长度，所以我们在函数的入口处直接将  pre.length-1 &#x2F; in.length -1 作为最后一个节点的下标；</p><p>2.分别递归构造左右子树的时候， 标注红色部分的区别容易搞错。</p><p>root.left &#x3D; reConstructTree(pre, prestart+1, prestart+leftsize, in, instart, index-1);<br>        root.right &#x3D; reConstructTree(pre, prestart+leftsize+1, preend, in, index+1, inend);</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目的完成</title>
      <link href="/2022/07/16/%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%8C%E6%88%90/"/>
      <url>/2022/07/16/%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%8C%E6%88%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>总结：这周我们写的项目基本上就结束了，这周也是通过测试页面来发现问题，然后再进行修改，其实是比较轻松的，给我分的任务很简单，也是之前一直锻炼的部分，他们写的有些是之前没有接触过的东西，然后我也要私下的进行学习。然后现在开始每天刷一道力扣里面的剑桥offer里面的算法，现在一开始的算法是比较简单的，主要还是对于java里面的api的使用不是很熟练，然后有什么方法自己也要在api里面进行查找，自己也是记不住，私下也是要多找一些题来，来帮助我们记。自己虽然没有写导出文件这个接口，但自己也是上网查了一下，如何实现，这里也是用到了jQuery。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> //点击导出按钮事件</span><br><span class="line">exportDataToExcel()&#123;</span><br><span class="line">//table的ID</span><br><span class="line">$(&quot;#tables&quot;).table2excel(&#123;</span><br><span class="line">exclude: &quot;.noExl&quot;, </span><br><span class="line">name: &quot;Excel Document Name&quot;,</span><br><span class="line">filename: &quot;订单列表&quot;+&#x27;.xls&#x27;,</span><br><span class="line">exclude_img: true,</span><br><span class="line">exclude_links: true,</span><br><span class="line">exclude_inputs: true</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">注：table2excel插件的可用配置参数有：</span><br><span class="line">    exclude：不被导出的表格行的CSS class类。</span><br><span class="line">name：导出的Excel文档的名称。</span><br><span class="line">filename：Excel文件的名称。</span><br><span class="line">exclude_img：是否导出图片。</span><br><span class="line">exclude_links：是否导出超链接</span><br><span class="line">exclude_inputs：是否导出输入框中的内容。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在写项目的第二周</title>
      <link href="/2022/07/10/%E5%9C%A8%E5%86%99%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
      <url>/2022/07/10/%E5%9C%A8%E5%86%99%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周下来，我们要写的东西基本上都写完了，剩下的都是进行细节的完善，然后就是对axios的拦截器的使用，我们也要进行细节的学习，然后并使用它，也是对拦截器做了一些总结</p><p>axios的拦截器分为两种：</p><ol><li><strong>请求拦截器是请求之前拦截</strong></li><li><strong>响应拦截器是响应完成后拦截</strong></li></ol><p><strong>拦截器的模板：</strong></p><p>**        请求拦截器的模板：**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    //这里可以在请求成功之前，做一些任务</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    //请求失败的返回值</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>          请求拦截器的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个请求拦截器的实例</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    //拦截器请求成功之前</span><br><span class="line">            var token  = sessionStorage.getItem(&#x27;token&#x27;)</span><br><span class="line">            if(token == null)&#123;</span><br><span class="line">                return config  </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                axios.defaults.headers[&#x27;token&#x27;] = token</span><br><span class="line">                return config</span><br><span class="line">            &#125;</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    //拦截器请求失败</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>        响应拦截器的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    //对response的数据做处理</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对response的失败做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二次写项目</title>
      <link href="/2022/07/02/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%86%99%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/07/02/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%86%99%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这次也是前后端合作一起写项目，明显感觉到自己写页面比之前要快了一些 ，第一周的时间就已经写了好多，这次也是要使用axios来获取后端的接口，然后再用ajax来进行页面的渲染，axios也是在写项目中，我们要学习的东西。这里也介绍axios的基本用法</p><p>axios特点</p><ul><li>支持客户端发送ajax请求</li><li>支持服务端node.js发送请求</li><li>支持Promise请求</li></ul><p>axios的基本用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method: &#x27;请求方式&#x27;, // get post</span><br><span class="line">  url: &#x27;请求地址&#x27;,</span><br><span class="line">  data: &#123;    // 拼接到请求体的参数,  post请求的参数</span><br><span class="line">    xxx: xxx,</span><br><span class="line">  &#125;,</span><br><span class="line">  params: &#123;  // 拼接到请求行的参数, get请求的参数</span><br><span class="line">   xxx: xxx </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(data=&gt; &#123;</span><br><span class="line">  console.log(data) // 后台返回的结果</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">  console.log(err) // 后台报错返回</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> axios的get传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">axios.default.baseURL = &#x27;http://110.40.205.103:8099/&#x27;;</span><br><span class="line">axios(&#123;</span><br><span class="line">    url: &quot; /user/Application&quot;,</span><br><span class="line">    method: &quot;GET&quot;,</span><br><span class="line">    params: &#123;</span><br><span class="line">        //此处的参数都会被拼接到url？的后面</span><br><span class="line">        name: name,</span><br><span class="line">     &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">      .then((data) =&gt; &#123;</span><br><span class="line">          console.log(data);</span><br><span class="line">       &#125;)</span><br><span class="line">      .catch((err) =&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>axios的post传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios.default.baseURL = &#x27;http://110.40.205.103:8099/&#x27;;</span><br><span class="line">axios(&#123;</span><br><span class="line">        url: &quot; /user/applicate&quot;,</span><br><span class="line">        method: &quot;POST&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          name: name,</span><br><span class="line">          age: age,</span><br><span class="line">          sex: sex,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then((data) =&gt; &#123;</span><br><span class="line">          console.log(data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) =&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise封装ajax</title>
      <link href="/2022/06/25/promise%E5%B0%81%E8%A3%85ajax/"/>
      <url>/2022/06/25/promise%E5%B0%81%E8%A3%85ajax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>原始的ajax的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var onSuccess = function(result)&#123;&#125;; //成功的回调</span><br><span class="line">var onFail = function(error)&#123;&#125;; //失败的回调</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&quot;POST&quot;, &quot;www.baidu.com&quot;, true);</span><br><span class="line">xhr.onload = function()&#123;</span><br><span class="line">  if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;</span><br><span class="line">    onSuccess(xhr.response);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    onFail(xhr.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">  onFail(Error(&quot;网络异常&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XMLHttpRequest对象常用属性：</p><p>（1）onreadystatechange:用于设置事件处理函数；<br>（2）readystate:用于返回Ajax请求的处理状态，readystate属性共有5种取值：</p><p>（3）status：用于返回服务器处理HTTP状态码；<br>（4）responseText和responseXML：用于获取服务器对HTTP请求的响应内容。如果响应内容是普通文本字符串则是第一个，如果是<a href="https://so.csdn.net/so/search?q=XML&spm=1001.2101.3001.7020" title="XML">XML</a>格式的则为第二个。</p><p>用promise封装后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function queryData (url)&#123;</span><br><span class="line"> var p = new Promise(function(resove,reject)&#123;</span><br><span class="line">     var xhr = XMLHttpRequest();</span><br><span class="line">     xhr.onreadystatechange = function()&#123;</span><br><span class="line">         if(xhr.readystate == 4&amp;&amp;xhr.status==200) &#123;</span><br><span class="line">             resove(&#x27;xhr.responseText&#x27;);</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">             reject(&#x27;服务器错误&#x27;)；</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     xhr.open(&#x27;get&#x27;,url);</span><br><span class="line">     xhr.send();</span><br><span class="line"> &#125;)</span><br><span class="line"> return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise常用实例方法：</p><p>（1）then()，用于得到正确的返回结果<br>（2）catch()，获取异常信息，具体用法与上面代码中then()方法一致。</p>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Node.js实现邮箱验证</title>
      <link href="/2022/06/20/%E4%BD%BF%E7%94%A8Node.js%E5%AE%9E%E7%8E%B0%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81/"/>
      <url>/2022/06/20/%E4%BD%BF%E7%94%A8Node.js%E5%AE%9E%E7%8E%B0%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>首先要开启邮箱的 POP3&#x2F;<a href="https://so.csdn.net/so/search?q=SMTP&spm=1001.2101.3001.7020" title="SMTP">SMTP</a> 服务</p><ol><li>QQ邮箱：登录QQ邮箱，点击设置</li><li>点击账户</li><li>向下拉，看到POPS&#x2F;SMTP服务开启</li><li>然后按照提示慢慢弄</li></ol><p>借用node中的nodemailer实现邮箱验证</p><p>npm i nodemailer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const nodeemailer = require(&#x27;nodemailer&#x27;);</span><br><span class="line">const transporter = nodeemailer.createTransport(&#123;</span><br><span class="line">    host: &quot;smtp.qq.com&quot;,// QQ邮箱的SMTP地址</span><br><span class="line">    port: 465,// 每个邮箱的端口号可能是一样的，一般都使用</span><br><span class="line">    auth: &#123;</span><br><span class="line">        &quot;user&quot;: &#x27;xxxxxxxxxxxx@qq.com&#x27;, // 你自己的邮箱的邮箱地址</span><br><span class="line">        &quot;pass&quot;: &#x27;****************&#x27;         // 上面我们提到的授权码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">function sendMail(mail,code)&#123;</span><br><span class="line">    // 邮件信息</span><br><span class="line">    let mailObj = &#123;</span><br><span class="line">        form:&#x27;&quot;今天天气真不错&quot;&lt;1878856344@qq.com&gt;&#x27;,</span><br><span class="line">        to:mail,</span><br><span class="line">        subject:&#x27;1902&#x27;,</span><br><span class="line">        text:`您的验证码是$&#123;code&#125;,有效时间五分钟`</span><br><span class="line">    &#125;</span><br><span class="line">    //  发送验证码</span><br><span class="line">    transporter.sendMail(mailObj,(err,data)=&gt;&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    sendMail</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务器的js中写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.post(&#x27;/getMailCode&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">    let &#123;mail&#125; = req.body;</span><br><span class="line">    let code = parseInt(Math.random() * 10000); // 随机验证码</span><br><span class="line">    Mail.send(mail,code);</span><br><span class="line">    // res.send(code);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps的抠图</title>
      <link href="/2022/06/11/ps%E7%9A%84%E6%8A%A0%E5%9B%BE/"/>
      <url>/2022/06/11/ps%E7%9A%84%E6%8A%A0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>对于ps，我一开始是懵的，也是通过视频了解了抠图，然后自己也是准备了基本常用的</p><p>一、抽出抠图</p><p>1、ps打开素材，鼠标点击菜单栏的滤镜-抽出，(有些ps里面没有抽出，那么就在百度里面搜出抽出插件功能，进行下载安装)</p><p>2、进入后，把强制前景前面的框，鼠标点击一下，打上勾</p><p>3、选择吸管，然后用吸管吸取头发上面的颜色</p><p>4、选中“标记所要保留的区域”</p><p>5、然后点击确定，就OK了，这时候出现的头发效果不是很好，我们用历史记录画笔工具，进行涂抹，就可以把头发效果依次呈现最佳.</p><p>二、通道抠图</p><p>1.、打开素材，鼠标点击通道</p><p>2、里面看到了红，绿，那么我们就要看抠什么</p><p>3、调整色阶，让背景淡化，变成白色，如果背景还是有黑色花，就用白色画笔擦拭，要想要效果更好，就用加深工具对图像进行加深</p><p>4、鼠标点击图像-调整-反向</p><p>5、选取图像，然后添加图层蒙版，图就抠好了，我只说方法，细节还是自己把握好</p><p>三、钢笔抠图</p><p>我们打开素材图，在工具栏里面选择钢笔工具，然后用钢笔勾勒需要抠图的地方，勾勒完毕后，点击鼠标右键，弹出选框，点击建立选区，然后按CTRL+J就可以复制这个勾勒出来的图层</p><p>四、魔术棒抠图(只适用于纯白背景的素材图)</p><p>1、在ps里面打开你要进行抠图的素材</p><p>2、在界面的选项栏中找到我们要使用的魔棒工具</p><p>3、使用魔棒工具点选我们要扣的素材图(如果是要删除背景，点选背景也可以)</p><p>4、当我们选中之后，按着ctrl+j就会复制出来我们想要扣取得那一部分图层(如果选中的是背景层，按Delete键删除即可)</p>]]></content>
      
      
      <categories>
          
          <category> Ps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在寝室上课的一周</title>
      <link href="/2022/05/14/%E5%9C%A8%E5%AF%9D%E5%AE%A4%E4%B8%8A%E8%AF%BE%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/05/14/%E5%9C%A8%E5%AF%9D%E5%AE%A4%E4%B8%8A%E8%AF%BE%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>突如其来的疫情，也是把我们给困在了寝室，然后小组也是不让去了，在寝室学习的效率是没有在小组学习的效率高，这次的任务是完善页面，自己写的页面还是有很多的不足，页面之间不是很连贯，也缺少一定的提示框，有些细节还没有做到位，所以这样几天都在找自己的bug，也是和小团队商量需要完善的内容，自己也是会去看页面的整体内容，还有接口的实现，毕竟每个人写的接口形式不一样，自己从中学习一些自己不会的知识，也再完善js的内容，尽量减少代码的重复率，也是在这样中沉淀自己。这次的项目也是我们第一次的项目，我们也是在适应这种以一个团队来进行的配合完成的任务，也在配合中不断磨合。</p><p>下周就开始正常的学习生活了，也是离期末考试没有多长时间了，自己也要开始进行复习了，会调整复习时间和学习新知识的时间。下周也是任务结束的时候，又要进行考核了，自己也会对页面的内容熟悉熟悉。到后面小组的学习任务应该不会很重，所以给我们的复习时间还是很多的。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本次前后端的交互项目</title>
      <link href="/2022/05/08/%E6%9C%AC%E6%AC%A1%E5%89%8D%E5%90%8E%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/08/%E6%9C%AC%E6%AC%A1%E5%89%8D%E5%90%8E%E7%AB%AF%E7%9A%84%E4%BA%A4%E4%BA%92%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>总结：身为组长，这么没有协调好时间，交互的时间过于靠后，我们的接口比较多，然后在项目结束了的时候，还没有交互完。然后也有对全局的一个把控不是很好，整体页面的流畅性不好，页面之间的跳转都没有弄好，在演示的时候，只能通过一些写的比较好的页面进行跳转，交流也不是很多，大部分时间我们都是自己写自己的，然后到距离项目还有十几天才开始一起讨论，确实有点晚了。身为组长也没有进行督促，整体页面写的进度不算很快，然后在到后面交互，就时间不是很充裕吧，然后整体没有协调好，自己的页面写的也不咋地，还有很多要改进的地方。</p><p>等考核之后，自己要好好对自己的页面进行修改，什么小细节都要找一找，看一看是否有问题。然后自己也要进行反思，身为组长，整体是没有这么协调好的，也没有起督促作用，所以这次做的不是很好。这次组长也是对自己的一种历练吧，自己也是没有怎么管理一个团队，到最后问题频出。也从这次考核中学点很多东西。希望下次自己变得更好。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目交互中~</title>
      <link href="/2022/05/01/%E9%A1%B9%E7%9B%AE%E4%BA%A4%E4%BA%92%E4%B8%AD~/"/>
      <url>/2022/05/01/%E9%A1%B9%E7%9B%AE%E4%BA%A4%E4%BA%92%E4%B8%AD~/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>通过这几天的前后端的交互，我们前端的学习还需要加深，因为学习的不是很深，自己也是在写项目的过程中，还需要进行知识的复习。也是遇到了自己没有办法解决的事情，比如：音乐的下载，也是进行了很多次的查询，也是没有找到相应的答案。在写项目过程中，我觉得写音乐播放页面是有一定难度的，自己也是总结了一下内容：</p><p>1.歌曲进度条的同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function sync()&#123;</span><br><span class="line">    let c = parseInt(player_song[0].currentTime / 60);</span><br><span class="line">    let d = parseInt(player_song[0].currentTime % 60);</span><br><span class="line">    let minute = d &gt; 10 ? d: &quot;0&quot;+d;</span><br><span class="line">    let minute1 = c &gt;10 ? c : &quot;0&quot;+c;</span><br><span class="line">    song_play_current1[0].innerHTML = minute1 + &quot;:&quot; +minute;</span><br><span class="line">    let b = player_song[0].duration;</span><br><span class="line">    let a = player_song[0].currentTime;</span><br><span class="line">    let progress = a / b;</span><br><span class="line">    var width = song_play_progress[0].offsetWidth;</span><br><span class="line">    let left = parseInt(progress  * width);</span><br><span class="line">    song_play_current[0].style.marginLeft = left + &#x27;px&#x27;;</span><br><span class="line">    song_play_finish[0].style.width = left + &#x27;px&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.对歌词的格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let content = data.music.musicLyricsPath.split(&quot;\n[&quot;);</span><br><span class="line">        var all = &quot;&quot;;</span><br><span class="line">        content[0] = content[0].replace(&quot;[&quot;,&quot;&quot;);</span><br><span class="line">        console.log(content);</span><br><span class="line">        for(let i=0;i&lt;content.length;i++)&#123;</span><br><span class="line">            var content1 = content[i].split(&quot;]&quot;);</span><br><span class="line">            var content2 = content1[0].split(&quot;:&quot;);</span><br><span class="line">            var timer = parseInt(content2[0])*60 + parseInt(content2[1]);</span><br><span class="line">            if(player_song[0].currentTime &gt; timer)&#123;</span><br><span class="line">                content1[1].style.color = &quot;red&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(content1);</span><br><span class="line">            all +=`&lt;p id=&quot;$&#123;timer&#125;&quot;&gt;$&#123;content1[1]&#125;&lt;/p&gt;`;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>3.歌词的同步处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for(let i=0;i&lt;p.length;i++)&#123;</span><br><span class="line">        if(this.currentTime &gt; p[i].id)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        p[i].classList.remove(&quot;on&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    p[index].classList.add(&quot;on&quot;);</span><br><span class="line">    if(p[index].offsetTop &gt; 68)&#123;</span><br><span class="line">        if(index &lt;= p.length - 2)&#123;</span><br><span class="line">            player_song_lyric_main[0].style.transform = &quot;translateY(-&quot;+ (p[index].offsetTop - 68) + &quot;px&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这些是完成播放页面最基础的内容，之后还有音乐大小调整之类的操作。</p><p>下周是最后几天的时间了，把自己的页面完善完善，然后和对团队一起过一过页面看有没有什么bug。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript css 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相互交互的一周</title>
      <link href="/2022/04/24/%E7%9B%B8%E4%BA%92%E4%BA%A4%E4%BA%92%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/04/24/%E7%9B%B8%E4%BA%92%E4%BA%A4%E4%BA%92%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>总结：在交互的过程中也是有很多的问题，就不如我们使用接口的时候地址的问题，我们小组出现了跨越的问题，发现tomcat配置的地址不一样，然后相互打开页面是，接口使用不了，然后只要把tomcat启动的地址改成一样的，就可以了。我们前端交互，要相互交换数据，我一开使用的是window.localstroage.这个属性来储存数据，发现这样并不是很好，然后自己也是去网上找到了更快获取的数据的方法，我使用了window.location.href后面跟上要跳转的页面，然后加上？加上要传输的数据就行了，然后页面接收的时候，要是使用window.location.search会自动获取？后面的数据，然后使用string.split分割一下字符串，然后获取要的那个数据，当然组员之间要相互沟通好，要不然很容易交互错误。</p><p>下周计划：下周就是我们项目也快要截止了，也是前后端交互也要快一点，然后自己也会不断完善页面的样式，相互之间要多交流，然后讨论交互，和自己的思路，毕竟每个人写的不一样，然后相互了解互相怎么写的。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thymeleaf的深入</title>
      <link href="/2022/04/17/thymeleaf%E7%9A%84%E6%B7%B1%E5%85%A5/"/>
      <url>/2022/04/17/thymeleaf%E7%9A%84%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>周总结：thymeleaf的循环结构</p><p>一、th:each迭代循环常用语法简介<br>1.1、th:each中迭代对象的类型<br>        迭代对象可以是java.util.List,java.util.Map,数组等数据类型;</p><p>1.2、th:each循环迭代的基本语法<br>        th:each&#x3D;”obj,iterStat:${objList}“</p><p>1.3、使用循环迭代的常用html标签元素有哪些？<br>       可以在div、tr、li等标签元素中使用；<br>常用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;用户昵称&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr th:each=&quot;user:$&#123;userlist&#125;&quot;&gt;</span><br><span class="line">                &lt;td th:text=&quot;$&#123;user.id&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td th:text=&quot;$&#123;user.username&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td th:text=&quot;$&#123;user.password&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td th:text=&quot;$&#123;user.petname&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>2.2.2 下标状态变量用法说明</p><p>userStat称作状态变量，属性有：<br>index:当前迭代对象的迭代索引，从0开始，这是索引属性；<br>count:当前迭代对象的迭代索引，从1开始，这个是统计属性；<br> size:迭代变量元素的总量，这是被迭代对象的大小属性；<br>current:当前迭代变量；<br>even&#x2F;odd:布尔值，当前循环是否是偶数&#x2F;奇数（从0开始计算）；<br> first:布尔值，当前循环是否是第一个；<br>last:布尔值，当前循环是否是最后一个；</p><p>下周计划：自己写的项目要功能要基本上实现，thymeleaf也要加强学习，然后也通过这周的进度，反映出来我们写的还是很慢的，希望这周有所提升</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf</title>
      <link href="/2022/04/09/Thymeleaf/"/>
      <url>/2022/04/09/Thymeleaf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周主要学习了thymeleaf的标准方言的使用：</p><p>大多数 Thymeleaf 属性允许将它们的值设置为或包含_表达式_，我们将其称为_标准表达式_，因为它们使用的方言。它们可以有五种类型：</p><ul><li><code>$&#123;...&#125;</code>: 变量表达式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;session.user.name&#125;</span><br></pre></td></tr></table></figure><ul><li><code>*&#123;...&#125;</code>: 选择表达式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#123;customer.name&#125;</span><br></pre></td></tr></table></figure><ul><li><code>#&#123;...&#125;</code>: 消息 (i18n) 表达式。</li></ul><p>消息表达式（通常称为_文本外部_化、_国际化_或_i18n_）允许我们从外部源（文件）检索特定于语言环境的消息<code>.properties</code>，通过键引用它们并（可选地）应用一组参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;main.title&#125;</span><br><span class="line">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@&#123;...&#125;</code>：链接（URL）表达式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a th:href=&quot;@&#123;/order/list&#125;&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li><code>~&#123;...&#125;</code>: 片段表达式。</li></ul><p>片段表达式是一种表示标记片段并在模板周围移动它们的简单方法。多亏了这些表达式，片段可以被复制，作为参数传递给其他模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure><p> 表达式的预处理：</p><p>表达式的最后一件事是有一种叫做_表达式预处理_的东西，在 之间指定<code>__</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;selection.__$&#123;sel.code&#125;__&#125;</span><br></pre></td></tr></table></figure><p> 这周也是对thymeleaf简单的认识了一下。</p><p>下周计划：对thymeleaf进一步的学习，并在写页面的时候测试测试，也要给自己每天设置一定的完成度，尽快的完成页面的制作。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5 Web Workers</title>
      <link href="/2022/04/02/H5%20Web%20Workers/"/>
      <url>/2022/04/02/H5%20Web%20Workers/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>一，web worker介绍<br>1.javaScript是单线程的。</p><p>2.JavaScript的单线程机制会带来一个问题，当有一些非常复杂的任务需要处理时，页面不得不需要等待任务处理完成才能响应用户的操作，也就是说页面被阻塞了，这对于页面的响应及用户体验都会带来一些负面的影响。</p><p>3.为了解决这个问题，同时也是为了利用多核CPU的计算能力，HTML5提出了Web Worker标准，允许JavaScript创建多个线程。</p><p>4.简单来说Web Worker就是一个运行在后台的JavaScript线程，并且不会影响页面的响应。</p><p>5.Web Worker 可以分为两种不同线程类型，一个是专用线程 Dedicated Worker，一个是共享线程 Shared Worker。</p><p>二，web worker的限制<br>1.子线程由js引擎管理，运行在一个全新的环境WorkerGlobalScope下，因此web worker有几点限制。<br>Web Worker无法访问DOM节点；<br>Web Worker无法访问全局变量或是全局函数；<br>Web Worker无法调用alert()或者confirm之类的函数；<br>Web Worker无法访问window、document之类的浏览器全局变量。</p><p>三，web worker语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let worker= new Worker(&#x27;worker.js&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//主线程</span><br><span class="line">var worker = new Worker(&#x27;worker.js&#x27;);</span><br><span class="line">worker.onmessage = function (e) &#123;</span><br><span class="line">    var data = e.data;</span><br><span class="line">&#125;</span><br><span class="line">var messageData = &#123;</span><br><span class="line">    message: &#x27;hello worker!&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">worker.postMessage(messageData);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//子线程</span><br><span class="line">self.onmessage = function(e) &#123;</span><br><span class="line">    var messages = e.data;  // e.data为&#123;message: &#x27;hello worker!&#x27;&#125;</span><br><span class="line">    var workerResult = &#123;&#125;;</span><br><span class="line">    // do something</span><br><span class="line">    ...</span><br><span class="line">    postMessage(workerResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序算法</title>
      <link href="/2022/03/26/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/26/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>通过这一周高强度的算法练习，有些是看题解才能写出来的，在这中间也是学到了很多的算法。主要学会了快速排序。</p><p>快速排序:</p><p>快速排序 的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><p>6.1 算法描述</p><p>快速排序使用分治法来把一个串分为两个子串。   具体算法描述如下：<br>步骤1：从数列中挑出一个元素，称为 “基准”；  <br>步骤2：重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区操作；<br>步骤3：递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p><p>public class QuickSort {<!-- --><br>    public static void quickSort(int[] arr,int low,int         high){<!-- --><br>        int i,j,temp,t;<br>        if(low&gt;high){<!-- --><br>            return;<br>        }<br>        i&#x3D;low;<br>        j&#x3D;high;<br>        &#x2F;&#x2F;temp就是基准位<br>        temp &#x3D; arr[low];</p><p>        while (i&lt;j) {<!-- --><br>            &#x2F;&#x2F;先看右边，依次往左递减<br>            while (temp&lt;&#x3D;arr[j]&amp;&amp;i&lt;j) {<!-- --><br>                j–;<br>            }<br>            &#x2F;&#x2F;再看左边，依次往右递增<br>            while (temp&gt;&#x3D;arr[i]&amp;&amp;i&lt;j) {<!-- --><br>                i++;<br>            }<br>            &#x2F;&#x2F;如果满足条件则交换<br>            if (i&lt;j) {<!-- --><br>                t &#x3D; arr[j];<br>                arr[j] &#x3D; arr[i];<br>                arr[i] &#x3D; t;<br>            }</p><p>        }<br>        &#x2F;&#x2F;最后将基准为与i和j相等位置的数字交换<br>         arr[low] &#x3D; arr[i];<br>         arr[i] &#x3D; temp;<br>        &#x2F;&#x2F;递归调用左半数组<br>        quickSort(arr, low, j-1);<br>        &#x2F;&#x2F;递归调用右半数组<br>        quickSort(arr, j+1, high);<br>    }<br>}</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忙碌的一周</title>
      <link href="/2022/03/12/%E5%BF%99%E7%A2%8C%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/03/12/%E5%BF%99%E7%A2%8C%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周：自己也是没有待在小组很长时间，课程非常的满，然后最近在更新页面的样式和调试页面跳转的同时数据的传输，还有就是通过复选框来确定删除和修改的数据。可以通过localStroage这个属性可以来实现不同页面的数据的传输，在登录页面上使用localStroage.setItem(“属性名”,”属性值”)，来存储数据，然后再后台管理的页面上通过localStroage.getItem(“属性名”)，来获取登录信息就行了。还有分页查询中按钮的个数根据每页查询的多少来增减，这需要在进行页面渲染的同时添加，就要获取总数然后在计算分成多少页，之后再给每个按钮绑定上点击事件，重新渲染页面就行了。</p><p>下周计划：自己的页面完成了，可以对es6的内容进行复习，es6里面增添了很多的功能，也简化了js的代码，自己在页面上使用的es6的内容还不是很多，主要就是用了箭头函数和模板字面量，es6中的内容多，也有很多是比较难理解的，最好是搭配着视频，然后自己等着敲一敲理解意思。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript 前端 html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习es6的一周</title>
      <link href="/2022/03/06/%E5%AD%A6%E4%B9%A0es6%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/03/06/%E5%AD%A6%E4%B9%A0es6%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周学习情况：这周进行边学习边进行页面的制作，对于做接口页面用jQuery的Ajax，其实这种方法还是很简单的，主要就是对数据处理是一种难点，这里我是用添加数据到页面的时候，给input的checkbox添加属性，这个属性获取数据，这样的数据就会保存的属性中，然后在进行对属性的内容调取，就可以重复使用数据了，要不然获取的数据，在别的函数域中是不能调用的，而且传参数的时候，要注意参数的格式，要不然参数无法传上去的。如果没有报错，也没有上传成功，我们可以用consle.log()打印一些数据，看一看是哪块的问题，这个时候就要一点一点的查找，这也会加深自己的印象，让自己之后再重复写的时候，注意这个细节。</p><p>下周计划：首先要完成页面，然后再对es6进行更深入的学习，然后还有对算法的练习也是不能少的，现在对于递归也加深了了解，主要是自己要先看出规律，然后进行总结，然后再去写代码。对于二分查找还不是很熟练，然后自己要多加练习</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript 学习 jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学第一周</title>
      <link href="/2022/02/26/%E5%BC%80%E5%AD%A6%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
      <url>/2022/02/26/%E5%BC%80%E5%AD%A6%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>开学周，一开始还是比较匆忙，来小组三四天了，感觉自己还没有从寒假的状态转变回来，学习也有点浮躁，然后早早的完成了学习计划，自己对接下的学习不是很上心，这几天也就是在复习js，html，css等一些细节的知识点，学习不是很集中，也会跑神，总的来学学习效率不是很高，也是快考核了，是要检验自己在寒然的学习情况，最近也是快把寒假学习的知识忘的差不多了，然后自己也在通过敲代码和看文档进行知识的复习。</p><p>下周的计划：下周要开始新一轮的学习计划，这一学期自己的课程也变得很多了，接下来的学习的时间会减少很多，所以自己也要再加把劲 跟上进度，这周一过，下周就要进到三月份了，距离蓝桥杯还有一个月，自己对于算法题还是不是很熟练，通过自己的做题，也是发现有很多不会的地方，然后接下来的一个月，算法的题量也要跟得上了，然后自己的时间安排的会很慢，自己要去协调时间，把时间分给更重要的事情来做。</p><p>也是希望自己能够坚持下来，加油加油。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学前的一周</title>
      <link href="/2022/02/20/%E5%BC%80%E5%AD%A6%E5%89%8D%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2022/02/20/%E5%BC%80%E5%AD%A6%E5%89%8D%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>总结：寒假的学习也结束了，通过这周对于ajax请求的学习，前端的学习是要持续不断的，前端内容多，而且杂，需要我们梳理和整理的很多，有些知识点比较抽象，需要自己去动手去敲，然后去理解他们的用法，有些知识点现在虽然还用不到，但到后面用的比较多，我们不能光看一看别人是怎么用，自己也要去尝试尝试，这周也进行了算法的练习，这三道题对于我来说 还是有难度的，自己也是找了好多解析，然后自己去琢磨，也是消耗了大量的时间。</p><p>下周计划：下周要结束这阶段的学习，也会迎来考核，下周的重点就是对自己写的页面进行回顾，好好准备考核，也要对算法进行巩固，这次的算法让我看到了比赛的难度，自己也要对算法的类型进行总结，在寒假学习的内容还是比较多的，所以有时间也要对寒假学习的内容进行回顾和复习，可以通过对自己写的页面进行分析，也可以重新的去翻看知识点，加强自己对知识点的记忆。</p><p>最后，寒假完美的落幕了，迎接新的学期，踏上新的旅途。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这周的总结</title>
      <link href="/2022/02/13/%E8%BF%99%E5%91%A8%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2022/02/13/%E8%BF%99%E5%91%A8%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>之前的总结：对于这次考核，对于自己来说还是可以的，但是做的页面还是不太好，有一些瑕疵，也是通过这次的考核，我也认识到了js的重要，学长学姐问的一些问题，自己对于这些的答案比较模糊，自己之前也只是大概的看了看，动手实践的也是很少，以至于自己也是没有回答上来，然后紧接着就要进行下一轮的学习和考核，也是开学前最后一次的学习和考核，然后要改掉过年赖床上的习惯了。</p><p>下周的计划：对于js’的学习还不是很好，也要继续对js进行深度的学习，然后也是要跟上学习的进度，自己也要多多的去敲一敲代码，让自己更理解和了解它们的含义，也要尽量的早一些完成页面，然后再进行总的回顾和复习，过年期间也是好久没有自己动手写一写算法了，从下周开始，算法自己也要开始写，算法的比赛的时间也定了，离比赛也越来越近了，自己也是希望通过努力可以取得好的成绩。</p><p>        也是再有个几天就要开学了，不能让自己的燥起来，要冷静下来，好好的学习。.active:hover{color:#fff;background-color:#C8261C;border-color:#C8261C;}#btnPrev{width:60px}#btnNext{width:60px}”<br>    document.getElementsByTagName(‘head’).item(0).appendChild(style);</p><pre><code>/*   需要一个&lt;ul id=&quot;pagination&quot;&gt;&lt;/ul&gt;标签 pages; // 总页数 pageSize; // 一页显示数量 pageIndex; // 当前页  all_size;//是所有数据 name; // 要渲染的函数*/let totalPage = pages;  // 总页数function initPagination() &#123;    let pagination = document.querySelector(&#39;#pagination&#39;);    let pageHtml;  // 按钮内容    let prevButton = `&lt;li class=&#39;list-items&#39; id=&#39;btnPrev&#39;&gt;上一页&lt;/li&gt;` // 向左    let nextButton = `&lt;li class=&#39;list-items&#39; id=&#39;btnNext&#39;&gt;下一页&lt;/li&gt;`// 向右    let firstPage = `&lt;li class=&#39;list-items&#39; pagenumber=1&gt;1&lt;/li&gt;`// 第一页    let lastPage = `&lt;li class=&#39;list-items&#39; pagenumber=$&#123;totalPage&#125;&gt;$&#123;totalPage&#125;&lt;/li&gt;` // 最后一页    let leftOmitPage = `&lt;li class=&#39;list-items&#39; id=&#39;btnGoLeft&#39;&gt;...&lt;/li&gt;` // 省略号    let rightOmitPage = `&lt;li class=&#39;list-items&#39; id=&#39;btnGoRight&#39;&gt;...&lt;/li&gt;` // 省略号    let pageTips = `&lt;div style=&#39;line-height:38px;display:inline-block;&#39; id=&#39;pageTips&#39;&gt;共$&#123;all_size&#125;条&lt;/div &gt; `;    let pageInputs = `&lt;div style=&quot;display:inline-block;margin-left: 20px;&quot;&gt;&lt;span style=&quot;display:inline-block;vertical-align: 4px;&quot;&gt;跳转到&lt;/span&gt;&lt;input type=&quot;text&quot; class=&quot;page-input&quot; value=&quot;$&#123;pageIndex&#125;&quot;&gt;&lt;span style=&quot;display:inline-block;vertical-align: 4px;&quot;&gt;页&lt;/span&gt;&lt;/div&gt;`    let pageButton = `&lt;button class=&quot;page-button&quot;&gt;确定&lt;/button&gt;`;    pageHtml = pageTips; // 添加向左的按钮    pageHtml += prevButton;    /* 生成页数 */    if (totalPage &lt;= 5) &#123;  // 总页数小于等于5页全部显示        for (let i = 1; i &lt;= totalPage; i++) &#123;            pageHtml += `&lt;li class=&#39;list-items&#39; pagenumber=$&#123;i&#125;&gt;$&#123;i&#125;&lt;/li&gt;`;        &#125;    &#125; else if (pageIndex &lt;= 3) &#123; //总页数大于5且当前页远离总页数        for (let i = 1; i &lt;= 5; i++) &#123;            pageHtml += `&lt;li class=&#39;list-items&#39; pagenumber=$&#123;i&#125;&gt;$&#123;i&#125;&lt;/li&gt;`;        &#125;        pageHtml += rightOmitPage;        pageHtml += lastPage;    &#125; else if (pageIndex &gt; totalPage - 5) &#123; //总页数大于5且当前页接近总页数        pageHtml += firstPage;        pageHtml += leftOmitPage;        for (let i = totalPage-5 ; i &lt;= totalPage; i++) &#123;            pageHtml += `&lt;li class=&#39;list-items&#39; pagenumber=$&#123;i&#125;&gt;$&#123;i&#125;&lt;/li&gt;`;        &#125;    &#125; else &#123; //除开上面两个情况 当前页在中间        pageHtml += firstPage;        pageHtml += leftOmitPage;        for (let i = pageIndex - 2; i &lt;= pageIndex + 2; i++) &#123;            pageHtml += `&lt;li class=&#39;list-items&#39; pagenumber=$&#123;i&#125;&gt;$&#123;i&#125;&lt;/li&gt;`;        &#125;        pageHtml += rightOmitPage;        pageHtml += lastPage;    &#125;    pageHtml += nextButton; // 添加向右的按钮    pageHtml += pageInputs; // 添加跳转页面的输入框    pageHtml += pageButton; // 确定跳转的按钮    pagination.innerHTML = pageHtml;    document.querySelector(&quot;li[pagenumber=&#39;&quot; + pageIndex + &quot;&#39;]&quot;).classList.add(&#39;active&#39;);    let pagenumberBtns = document.querySelectorAll(&quot;li[pagenumber]&quot;); // 获取所有的页码按钮    /* 点击页码按钮进行翻页 */    pagenumberBtns.forEach(function (elements) &#123;        elements.onclick = function () &#123;            pageIndex = Number(this.innerHTML); // 当前页            document.querySelector(&quot;li[pagenumber=&#39;&quot; + pageIndex + &quot;&#39;]&quot;).classList.add(&#39;active&#39;);            pageHtml.innerHTML = &#39;&#39;;            name(pageIndex,pageSize);            initPagination();        &#125;    &#125;)    /* 向左翻页 */    document.getElementById(&#39;btnPrev&#39;).addEventListener(&quot;click&quot;, function () &#123;        if (pageIndex &gt; 1) &#123;            pageIndex--;            pageHtml.innerHTML = &#39;&#39;;            name(pageIndex,pageSize);            initPagination();        &#125;    &#125;)    /* 向右翻页 */    document.getElementById(&#39;btnNext&#39;).addEventListener(&quot;click&quot;, function () &#123;        if (pageIndex &lt; totalPage) &#123;            pageIndex++;            pageHtml.innerHTML = &#39;&#39;;            name(pageIndex,pageSize);            initPagination();        &#125;    &#125;)    /* 向左快速翻页 */    let btnGoLeft = document.getElementById(&#39;btnGoLeft&#39;);    if (btnGoLeft) &#123;        btnGoLeft.addEventListener(&#39;mouseenter&#39;, function () &#123;            this.innerHTML = &#39;&amp;lt;&#39;        &#125;)        btnGoLeft.addEventListener(&#39;mouseleave&#39;, function () &#123;            this.innerHTML = &#39;...&#39;        &#125;)        btnGoLeft.addEventListener(&quot;click&quot;, function () &#123;            if (pageIndex &gt; 10) &#123;                pageIndex -= 10;                pageHtml.innerHTML = &#39;&#39;;                name(pageIndex,pageSize);                initPagination();            &#125;        &#125;)    &#125;    /* 向右快速翻页 */    let btnGoRight = document.getElementById(&#39;btnGoRight&#39;)    if (btnGoRight) &#123;        btnGoRight.addEventListener(&#39;mouseenter&#39;, function () &#123;            this.innerHTML = &#39;&amp;gt;&#39;        &#125;)        btnGoRight.addEventListener(&#39;mouseleave&#39;, function () &#123;            this.innerHTML = &#39;...&#39;        &#125;)        btnGoRight.addEventListener(&quot;click&quot;, function () &#123;            if (pageIndex &lt; totalPage - 5) &#123;                pageIndex += 5;                pageHtml.innerHTML = &#39;&#39;;                name(pageIndex,pageSize);                initPagination();            &#125;        &#125;)    &#125;    let pageInputes = document.getElementsByClassName(&#39;page-input&#39;);    pageInputes[0].addEventListener(&#39;input&#39;,function()&#123;        // this.value = pageIndex;        this.value=this.value.replace(/^\D*(\d*(?:\.\d&#123;0,1&#125;)?).*$/g, &#39;$1&#39;);        if (this.value / 1 &gt; pages) &#123;            this.value = this.value + &quot;&quot;;            this.value = this.value.slice(0, this.value.length - 1);        &#125;    &#125;)    let button = document.getElementsByClassName(&#39;page-button&#39;);    button[0].onclick = function()&#123;        pageIndex = button[0].value;        // document.querySelector(&quot;li[pagenumber=&#39;&quot; + pageIndex + &quot;&#39;]&quot;).classList.add(&#39;active&#39;);        pageHtml.innerHTML = &#39;&#39;;        name(pageIndex,pageSize);        initPagination();    &#125;    // document.querySelector(&quot;li[pagenumber=&#39;&quot; + pageIndex + &quot;&#39;]&quot;).classList.add(&#39;active&#39;);&#125;initPagination();</code></pre><p>}</p><pre><code>页面呈现：![](https://img-blog.csdnimg.cn/1a6cb1c8b56342de990d54f08980dc77.png) 样式可以根据自己喜好进行修改。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript 前端 html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假第二周</title>
      <link href="/2022/01/23/%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
      <url>/2022/01/23/%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周总结：这周基本上也是完成了学习任务，在学习过程中，也是遇到了不少的问题，不过在学长学姐的帮助下也是很快就解决了，这周学习的情况比上周好多了，虽然偶尔也会在学的过程中玩手机，但比上周少多了，这周也进行了学习的考核，让我们制作网页，从中发现HTML和css的内容自己忘的差不多了，这周也是进行了html和css的复习，也是对自己的查缺补漏，从制作页面中也发现对自己学习的新知识掌握不是很牢固，也是有好多属性，方法记混和记不住，得自己慢慢的找。这周制作页面，也是对算法的练习减少了很多。</p><p>下周的计划：从这周的出现的问题中，自己要抓住新的知识，要多多进行练习，经常使用的要记住并熟练的使用，不经常使用的，自己要通过学习，记住都是什么意思，有什么用，页面的制作也是过半了，下周基本上就可以完工，然后自己会对内容再进行简化，使看起来很简洁。也不能减少算法的练习，三月就进行比赛了，对于算法就更不能懈怠了。</p><p>在家学习不比在学校学习效果好，所以我们要自律起来，加油家人们！</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假学习第一周</title>
      <link href="/2022/01/16/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
      <url>/2022/01/16/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>因为疫情我们不得不在家进行学习。</p><p>学习情况：通过这一周的学习，也是快把JavaScript的内容快学完了，在学习过程中也是遇到了不少的问题，也发现在家的学习效率和在学校里面的学习效率是真的不一样的，然后自己也会学着学着不自觉的玩起了手机，这是一个很不好的习惯，希望自己对于玩手机这个习惯下周有所改善。遇到的学习问题，比如：this的使用什么的，可以问问学长学姐，但没有在学校的效果好，在家多了一些自己去领悟的时间。</p><p>下周安排：下周把剩余的JavaScript的内容很快的学完，然后对于整体的JavaScript进行复习，之后自己要去找一些素材，去练练手，这样才可以更好的使用JavaScript，当然算法也是不能落下的，也会延续上周的习惯，对算法进行深入的学习。这周也会对自己第一周出现的不好的习惯，来进行改正，也快要过年，家里有时候比较忙，也要自己调整好学习时间，不能耽误了学习</p><p>疫情阻挡不住我们前进的脚步，让我们一起加油一起努力！！</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分前后端前的最后一周</title>
      <link href="/2021/12/12/%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%91%A8/"/>
      <url>/2021/12/12/%E5%88%86%E5%89%8D%E5%90%8E%E7%AB%AF%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周我们依然是在进行网页设计的考核中，也使我们更好的了解前端是干什么的，也向我们展现了前端学习过程中简单的和难的，在跟小组成员进行讲解一些问题的时候，也会发现自己的不足，再通过和小组成员的交流中，也会去改正自己的一些小问题，就在今天上午，我们进行了前端的考核，在通过学长问的问题也会发现自己学习还是有一些差别的，我自己会觉得前端相对于后端来说，会比较复杂，内容多，需要记住的也是很多的，所以前后端还是有很大的区别的。</p><p>下周：</p><p>我们要进行分前后端，我自己也会根据自己的兴趣和组长进行讨论，来决定自己的去向，但不管怎么样，以后的学习，会比前面的更加困难和艰辛，所以无论你我，都需要更加的努力去学习。也会根据学的方向不同，来调整学习计划，和时间分配，也快期末考试了，要合理的分配时间，去学习高数，英语等。不能让我们自己的专业课挂课。</p><p>希望无论我们选的方向是什么，我们都可以互相勉励，互相激励。世界很大，需要我们自己出去看看这个世界，去发现不一样的世界，也就更需要我们自己更加强大。</p><p>加油加油，每一天的努力，都是向未来那个更完美的自己招手。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考试的一周</title>
      <link href="/2021/12/05/%E8%80%83%E8%AF%95%E7%9A%84%E4%B8%80%E5%91%A8/"/>
      <url>/2021/12/05/%E8%80%83%E8%AF%95%E7%9A%84%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><p>这周总结:</p><p>前端学习完毕之后，我们就进行了前端的考核，在考核中，还是发现了自己不少的问题的，例如一开始的时候，自己还不是很理解盒子，定位之类的，在加上练习的不是很多，在制作网页的初期，自己做的还是很慢的，错误还是有很多的，以至于之后写着写着，就觉得自己一开始写的代码很乱，找也要找半天，在做网页开始的时候，辛亏有学长，学姐的帮忙，我才没有走很多的弯路，在之后制作的过程中，自己也是越来越熟练的运用一些知识了，但知识过于多，使得自己不得不去翻资料，来回找，也是浪费了不少的时间。以后还是要多多练习的。</p><p>下一周计划：</p><p>下周也是考核周，在做完的情况下，对网页进行优化，再在网页上设计一点点自己的元素，也会对知识进行系统的复习和巩固，当然记完也是很难的，所以要记住经常使用的，和出现次数还算可以的，在之后的制作中，也会去总结自己没有遇到过的知识，还有一些方法，正如一句话所说的一样：“不积跬步无以至千里，不积小流无以成江海”。</p><p>未来的日子是属于有准备的人的，所以我们必须时时刻刻都在准备中。也相信未来的你我，是一颗耀眼的明星，照亮了别人，自己也走上自己期望的道路上。</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
